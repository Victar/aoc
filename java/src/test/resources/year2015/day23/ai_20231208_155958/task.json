{
  "aocTask": {
    "text": "/\r\n/2015/about\r\n/2015/events\r\nhttps://teespring.com/stores/advent-of-code\r\n/2015/settings\r\n/2015/auth/logout\r\nllljjjiii 22*\r\n\r\n   \u003cy\u003e/2015\u003c/y\u003e\r\n\r\n\r\n/2015\r\n/2015/support\r\n/2015/sponsors\r\n/2015/leaderboard\r\n/2015/stats\r\n --- Day 23: Opening the Turing Lock ---\r\n\r\nLittle Jane Marie just got her very first computer for Christmas from some unknown benefactor. It comes with instructions and an example program, but the computer itself seems to be malfunctioning. She's curious what the program does, and would like you to help her run it.\r\n\r\n The manual explains that the computer supports two https://en.wikipedia.org/wiki/Processor_register and six https://en.wikipedia.org/wiki/Instruction_set (truly, it goes on to remind the reader, a state-of-the-art technology). The registers are named a and b, can hold any https://en.wikipedia.org/wiki/Natural_number, and begin with a value of 0. The instructions are as follows:\r\n\r\n \r\nhlf r sets register r to half its current value, then continues with the next instruction. \r\ntpl r sets register r to triple its current value, then continues with the next instruction. \r\ninc r increments register r, adding 1 to it, then continues with the next instruction. \r\njmp offset is a jump; it continues with the instruction offset away relative to itself. \r\njie r, offset is like jmp, but only jumps if register r is even (\"jump if even\"). \r\njio r, offset is like jmp, but only jumps if register r is 1 (\"jump if one\", not odd). \r\n \r\n\r\nAll three jump instructions work with an offset relative to that instruction. The offset is always written with a prefix + or - to indicate the direction of the jump (forward or backward, respectively). For example, jmp +1 would simply continue with the next instruction, while jmp +0 would continuously jump back to itself forever.\r\n\r\n The program exits when it tries to run an instruction beyond the ones defined.\r\n\r\n For example, this program sets a to 2, because the jio instruction causes it to skip the tpl instruction:\r\n\r\n inc a jio a, +2 tpl a inc a \r\n\r\nWhat is the value in register b when the program in your puzzle input is finished executing?\r\n\r\n Your puzzle answer was 184.\r\n\r\nThe first half of this puzzle is complete! It provides one gold star: *\r\n\r\n --- Part Two ---\r\n\r\nThe unknown benefactor is very thankful for releasi-- er, helping little Jane Marie with her computer. Definitely not to distract you, what is the value in register b after the program is finished executing if register a starts as 1 instead?\r\n\r\n Answer: \r\n\r\n Although it hasn't changed, you can still 23/input.\r\n\r\n You can also [Shareon https://twitter.com/intent/tweet?text=I%27ve+completed+Part+One+of+%22Opening+the+Turing+Lock%22+%2D+Day+23+%2D+Advent+of+Code+2015\u0026url=https%3A%2F%2Fadventofcode%2Ecom%2F2015%2Fday%2F23\u0026related=ericwastl\u0026hashtags=AdventOfCode https://] this puzzle.\r\n\r\n ",
    "input": "jio a, +19\ninc a\ntpl a\ninc a\ntpl a\ninc a\ntpl a\ntpl a\ninc a\ninc a\ntpl a\ntpl a\ninc a\ninc a\ntpl a\ninc a\ninc a\ntpl a\njmp +23\ntpl a\ntpl a\ninc a\ninc a\ntpl a\ninc a\ninc a\ntpl a\ninc a\ntpl a\ninc a\ntpl a\ninc a\ntpl a\ninc a\ninc a\ntpl a\ninc a\ninc a\ntpl a\ntpl a\ninc a\njio a, +8\ninc b\njie a, +4\ntpl a\ninc a\njmp +2\nhlf a\njmp -7\n",
    "year": "2015",
    "day": "23",
    "silverSolved": true,
    "goldSolved": false
  },
  "aiSolver": {
    "aiModel": "gpt-4-1106-preview",
    "aiMaxTokens": 4000,
    "aiPrompt": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n--- Day 23: Opening the Turing Lock ---\r\n\r\nLittle Jane Marie just got her very first computer for Christmas from some unknown benefactor. It comes with instructions and an example program, but the computer itself seems to be malfunctioning. She's curious what the program does, and would like you to help her run it.\r\n\r\n The manual explains that the computer supports two https://en.wikipedia.org/wiki/Processor_register and six https://en.wikipedia.org/wiki/Instruction_set (truly, it goes on to remind the reader, a state-of-the-art technology). The registers are named a and b, can hold any https://en.wikipedia.org/wiki/Natural_number, and begin with a value of 0. The instructions are as follows:\r\n\r\n \r\nhlf r sets register r to half its current value, then continues with the next instruction. \r\ntpl r sets register r to triple its current value, then continues with the next instruction. \r\ninc r increments register r, adding 1 to it, then continues with the next instruction. \r\njmp offset is a jump; it continues with the instruction offset away relative to itself. \r\njie r, offset is like jmp, but only jumps if register r is even (\"jump if even\"). \r\njio r, offset is like jmp, but only jumps if register r is 1 (\"jump if one\", not odd). \r\n \r\n\r\nAll three jump instructions work with an offset relative to that instruction. The offset is always written with a prefix + or - to indicate the direction of the jump (forward or backward, respectively). For example, jmp +1 would simply continue with the next instruction, while jmp +0 would continuously jump back to itself forever.\r\n\r\n The program exits when it tries to run an instruction beyond the ones defined.\r\n\r\n For example, this program sets a to 2, because the jio instruction causes it to skip the tpl instruction:\r\n\r\n inc a jio a, +2 tpl a inc a \r\n\r\nWhat is the value in register b when the program in your puzzle input is finished executing?\r\n\r\n Your puzzle answer was 184.\r\n\r\nThe first half of this puzzle is complete! It provides one gold star: *\r\n\r\n --- Part Two ---\r\n\r\nThe unknown benefactor is very thankful for releasi-- er, helping little Jane Marie with her computer. Definitely not to distract you, what is the value in register b after the program is finished executing if register a starts as 1 instead?\r\n\r\n ",
    "aiPromptTemplate": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n{AOC_TASK}",
    "aiResponse": "Here's a simple Go program to solve the task. Create a file named `main.go` with the following content:\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// Open the input file\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\n\t// Read instructions from the file\n\tinstructions := []string{}\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tinstructions = append(instructions, scanner.Text())\n\t}\n\n\t// Execute the program with a starting value of 1 for register a\n\tregisters := map[string]int{\"a\": 1, \"b\": 0}\n\texecuteProgram(instructions, registers)\n\n\t// Print the value of register b\n\tfmt.Println(registers[\"b\"])\n}\n\nfunc executeProgram(instructions []string, registers map[string]int) {\n\tip := 0 // Instruction pointer\n\tfor ip \u003c len(instructions) {\n\t\tfields := strings.Fields(instructions[ip])\n\t\tswitch fields[0] {\n\t\tcase \"hlf\":\n\t\t\tregisters[fields[1]] /= 2\n\t\tcase \"tpl\":\n\t\t\tregisters[fields[1]] *= 3\n\t\tcase \"inc\":\n\t\t\tregisters[fields[1]]++\n\t\tcase \"jmp\":\n\t\t\toffset, _ := strconv.Atoi(fields[1])\n\t\t\tip += offset\n\t\t\tcontinue\n\t\tcase \"jie\":\n\t\t\treg, offset := fields[1][:len(fields[1])-1], fields[2]\n\t\t\tif registers[reg]%2 == 0 {\n\t\t\t\to, _ := strconv.Atoi(offset)\n\t\t\t\tip += o\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase \"jio\":\n\t\t\treg, offset := fields[1][:len(fields[1])-1], fields[2]\n\t\t\tif registers[reg] == 1 {\n\t\t\t\to, _ := strconv.Atoi(offset)\n\t\t\t\tip += o\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tip++\n\t}\n}\n```\n\nThis program defines a function to execute the series of instructions provided in the input file, updating a map of registers as it goes along. It assumes the input file is named \"input.txt\" and exists in the same directory. The program reads the instructions and then starts with register `a` having a value of 1 as per the second part of your task, then it prints out the final value of register `b`.\n\nMake sure to place the 'input.txt' containing the instructions in the same directory as the 'main.go' file, then compile and run the program. The program outputs the result of register `b` after execution.",
    "aiResponseCode": "\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// Open the input file\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\n\t// Read instructions from the file\n\tinstructions := []string{}\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tinstructions = append(instructions, scanner.Text())\n\t}\n\n\t// Execute the program with a starting value of 1 for register a\n\tregisters := map[string]int{\"a\": 1, \"b\": 0}\n\texecuteProgram(instructions, registers)\n\n\t// Print the value of register b\n\tfmt.Println(registers[\"b\"])\n}\n\nfunc executeProgram(instructions []string, registers map[string]int) {\n\tip := 0 // Instruction pointer\n\tfor ip \u003c len(instructions) {\n\t\tfields := strings.Fields(instructions[ip])\n\t\tswitch fields[0] {\n\t\tcase \"hlf\":\n\t\t\tregisters[fields[1]] /= 2\n\t\tcase \"tpl\":\n\t\t\tregisters[fields[1]] *= 3\n\t\tcase \"inc\":\n\t\t\tregisters[fields[1]]++\n\t\tcase \"jmp\":\n\t\t\toffset, _ := strconv.Atoi(fields[1])\n\t\t\tip += offset\n\t\t\tcontinue\n\t\tcase \"jie\":\n\t\t\treg, offset := fields[1][:len(fields[1])-1], fields[2]\n\t\t\tif registers[reg]%2 == 0 {\n\t\t\t\to, _ := strconv.Atoi(offset)\n\t\t\t\tip += o\n\t\t\t\tcontinue\n\t\t\t}\n\t\tcase \"jio\":\n\t\t\treg, offset := fields[1][:len(fields[1])-1], fields[2]\n\t\t\tif registers[reg] == 1 {\n\t\t\t\to, _ := strconv.Atoi(offset)\n\t\t\t\tip += o\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\t\tip++\n\t}\n}\n",
    "aiResponseCodeOutput": "231\n",
    "aiAnswerFound": true,
    "aiAnswer": "231"
  },
  "aocSolve": {
    "level": "2",
    "answer": "231",
    "attemptAllowSubmit": true
  }
}