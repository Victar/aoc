{
  "aocTask": {
    "text": "/\r\n/2023/about\r\n/2023/events\r\nhttps://teespring.com/stores/advent-of-code\r\n/2023/settings\r\n/2023/auth/logout\r\nllljjjiii /2023/support 29*\r\n\r\n          /2023\r\n/2023\r\n/2023/support\r\n/2023/sponsors\r\n/2023/leaderboard\r\n/2023/stats\r\n Our /2023/sponsors help make Advent of Code possible:https://www.rewe-digital.com/en - Ho Ho Home of IT: Give yourself a gift and reimagine the digital future of retail in Germany, Austria, Bulgaria or Spain with us! \r\n\r\n--- Day 20: Pulse Propagation ---\r\n\r\nWith your help, the Elves manage to find the right parts and fix all of the machines. Now, they just need to send the command to boot up the machines and get the sand flowing again.\r\n\r\n The machines are far apart and wired together with long cables. The cables don't connect to the machines directly, but rather to communication modules attached to the machines that perform various initialization tasks and also act as communication relays.\r\n\r\n Modules communicate using pulses. Each pulse is either a high pulse or a low pulse. When a module sends a pulse, it sends that type of pulse to each module in its list of destination modules.\r\n\r\n There are several different types of modules:\r\n\r\n Flip-flop modules (prefix %) are either on or off; they are initially off. If a flip-flop module receives a high pulse, it is ignored and nothing happens. However, if a flip-flop module receives a low pulse, it flips between on and off. If it was off, it turns on and sends a high pulse. If it was on, it turns off and sends a low pulse.\r\n\r\n Conjunction modules (prefix \u0026) remember the type of the most recent pulse received from each of their connected input modules; they initially default to remembering a low pulse for each input. When a pulse is received, the conjunction module first updates its memory for that input. Then, if it remembers high pulses for all inputs, it sends a low pulse; otherwise, it sends a high pulse.\r\n\r\n There is a single broadcast module (named broadcaster). When it receives a pulse, it sends the same pulse to all of its destination modules.\r\n\r\n Here at Desert Machine Headquarters, there is a module with a single button on it called, aptly, the button module. When you push the button, a single low pulse is sent directly to the broadcaster module.\r\n\r\n After pushing the button, you must wait until all pulses have been delivered and fully handled before pushing it again. Never push the button if modules are still processing pulses.\r\n\r\n Pulses are always processed in the order they are sent. So, if a pulse is sent to modules a, b, and c, and then module a processes its pulse and sends more pulses, the pulses sent to modules b and c would have to be handled first.\r\n\r\n The module configuration (your puzzle input) lists each module. The name of the module is preceded by a symbol identifying its type, if any. The name is then followed by an arrow and a list of its destination modules. For example:\r\n\r\n broadcaster -\u003e a, b, c %a -\u003e b %b -\u003e c %c -\u003e inv \u0026inv -\u003e a \r\n\r\nIn this module configuration, the broadcaster has three destination modules named a, b, and c. Each of these modules is a flip-flop module (as indicated by the % prefix). a outputs to b which outputs to c which outputs to another module named inv. inv is a conjunction module (as indicated by the \u0026 prefix) which, because it has only one input, acts like an inverter (it sends the opposite of the pulse type it receives); it outputs to a.\r\n\r\n By pushing the button once, the following pulses are sent:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a broadcaster -low-\u003e b broadcaster -low-\u003e c a -high-\u003e b b -high-\u003e c c -high-\u003e inv inv -low-\u003e a a -low-\u003e b b -low-\u003e c c -low-\u003e inv inv -high-\u003e a \r\n\r\nAfter this sequence, the flip-flop modules all end up off, so pushing the button again repeats the same sequence.\r\n\r\n Here's a more interesting example:\r\n\r\n broadcaster - a %a - inv, con \u0026inv - b %b - con \u0026con - output \r\n\r\nThis module configuration includes the broadcaster, two flip-flops (named a and b), a single-input conjunction module (inv), a multi-input conjunction module (con), and an untyped module named output (for testing purposes). The multi-input conjunction module con watches the two flip-flop modules and, if they're both on, sends a low pulse to the output module.\r\n\r\n Here's what happens if you push the button once:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -high-\u003e inv a -high-\u003e con inv -low-\u003e b con -high-\u003e output b -high-\u003e con con -low-\u003e output \r\n\r\nBoth flip-flops turn on and a low pulse is sent to output! However, now that both flip-flops are on and con remembers a high pulse from each of its two inputs, pushing the button a second time does something different:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -low-\u003e inv a -low-\u003e con inv -high-\u003e b con -high-\u003e output \r\n\r\nFlip-flop a turns off! Now, con remembers a low pulse from module a, and so it sends only a high pulse to output.\r\n\r\n Push the button a third time:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -high-\u003e inv a -high-\u003e con inv -low-\u003e b con -low-\u003e output b -low-\u003e con con -high-\u003e output \r\n\r\nThis time, flip-flop a turns on, then flip-flop b turns off. However, before b can turn off, the pulse sent to con is handled first, so it briefly remembers all high pulses for its inputs and sends a low pulse to output. After that, flip-flop b turns off, which causes con to update its state and send a high pulse to output.\r\n\r\n Finally, with a on and b off, push the button a fourth time:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -low-\u003e inv a -low-\u003e con inv -high-\u003e b con -high-\u003e output \r\n\r\nThis completes the cycle: a turns off, causing con to remember only low pulses and restoring all modules to their original states.\r\n\r\n To get the cables warmed up, the Elves have pushed the button 1000 times. How many pulses got sent as a result (including the pulses sent by the button itself)?\r\n\r\n In the first example, the same thing happens every time the button is pushed: 8 low pulses and 4 high pulses are sent. So, after pushing the button 1000 times, 8000 low pulses and 4000 high pulses are sent. Multiplying these together gives 32000000.\r\n\r\n In the second example, after pushing the button 1000 times, 4250 low pulses and 2750 high pulses are sent. Multiplying these together gives 11687500.\r\n\r\n Consult your module configuration; determine the number of low pulses and high pulses that would be sent after pushing the button 1000 times, waiting for all pulses to be fully handled after each push of the button. What do you get if you multiply the total number of low pulses sent by the total number of high pulses sent?\r\n\r\n To begin, 20/input.\r\n\r\n Answer: \r\n\r\n You can also [Shareon https://twitter.com/intent/tweet?text=%22Pulse+Propagation%22+%2D+Day+20+%2D+Advent+of+Code+2023\u0026url=https%3A%2F%2Fadventofcode%2Ecom%2F2023%2Fday%2F20\u0026related=ericwastl\u0026hashtags=AdventOfCode https://] this puzzle.\r\n\r\n ",
    "input": "%vh -\u003e qc, rr\n\u0026pb -\u003e gf, gv, vp, qb, vr, hq, zj\n%zj -\u003e kn, pb\n%mm -\u003e dj\n%gp -\u003e cp\n\u0026dc -\u003e ns\n%qc -\u003e gp\n%dx -\u003e fq, dj\n%tg -\u003e nl, ks\n%pr -\u003e nl\n%gx -\u003e xf\n%hd -\u003e lt, nl\n%dq -\u003e dj, jc\n%ht -\u003e jv\n%bs -\u003e pb, rd\n\u0026nl -\u003e ks, cq, tc, xf, gx, hd, lt\n\u0026dj -\u003e dc, fq, jz, ht, zs, jc\n\u0026rr -\u003e gp, rv, jt, qc, sq\n%vr -\u003e qb\n%jz -\u003e dj, ht\n%hq -\u003e nx\n%cf -\u003e jg, rr\n%hj -\u003e cf, rr\n%mt -\u003e rr\n%sq -\u003e rr, vh\n%jg -\u003e rr, pd\n%gf -\u003e gv\n%xv -\u003e dj, dx\n%rh -\u003e nl, gx\nbroadcaster -\u003e hd, zj, sq, jz\n%jv -\u003e dj, zs\n%rd -\u003e vs, pb\n%pd -\u003e rr, mt\n\u0026rv -\u003e ns\n\u0026vp -\u003e ns\n%vs -\u003e pb\n%nx -\u003e pb, bs\n%zp -\u003e mm, dj\n\u0026ns -\u003e rx\n%lt -\u003e rh\n%pf -\u003e pr, nl\n%tc -\u003e qz\n%xz -\u003e dj, zp\n%qb -\u003e hq\n%rl -\u003e pf, nl\n%fq -\u003e xz\n%kn -\u003e pb, xn\n%xf -\u003e tg\n%qz -\u003e nl, rl\n%ks -\u003e tc\n%jt -\u003e kb\n%jc -\u003e xv\n%kb -\u003e hj, rr\n%zs -\u003e dq\n%gv -\u003e vr\n\u0026cq -\u003e ns\n%cp -\u003e rr, jt\n%xn -\u003e pb, gf\n",
    "year": "2023",
    "day": "20",
    "silverSolved": false,
    "goldSolved": false
  },
  "aiSolver": {
    "aiModel": "gpt-4-1106-preview",
    "aiMaxTokens": 4096,
    "aiPrompt": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n--- Day 20: Pulse Propagation ---\r\n\r\nWith your help, the Elves manage to find the right parts and fix all of the machines. Now, they just need to send the command to boot up the machines and get the sand flowing again.\r\n\r\n The machines are far apart and wired together with long cables. The cables don't connect to the machines directly, but rather to communication modules attached to the machines that perform various initialization tasks and also act as communication relays.\r\n\r\n Modules communicate using pulses. Each pulse is either a high pulse or a low pulse. When a module sends a pulse, it sends that type of pulse to each module in its list of destination modules.\r\n\r\n There are several different types of modules:\r\n\r\n Flip-flop modules (prefix %) are either on or off; they are initially off. If a flip-flop module receives a high pulse, it is ignored and nothing happens. However, if a flip-flop module receives a low pulse, it flips between on and off. If it was off, it turns on and sends a high pulse. If it was on, it turns off and sends a low pulse.\r\n\r\n Conjunction modules (prefix \u0026) remember the type of the most recent pulse received from each of their connected input modules; they initially default to remembering a low pulse for each input. When a pulse is received, the conjunction module first updates its memory for that input. Then, if it remembers high pulses for all inputs, it sends a low pulse; otherwise, it sends a high pulse.\r\n\r\n There is a single broadcast module (named broadcaster). When it receives a pulse, it sends the same pulse to all of its destination modules.\r\n\r\n Here at Desert Machine Headquarters, there is a module with a single button on it called, aptly, the button module. When you push the button, a single low pulse is sent directly to the broadcaster module.\r\n\r\n After pushing the button, you must wait until all pulses have been delivered and fully handled before pushing it again. Never push the button if modules are still processing pulses.\r\n\r\n Pulses are always processed in the order they are sent. So, if a pulse is sent to modules a, b, and c, and then module a processes its pulse and sends more pulses, the pulses sent to modules b and c would have to be handled first.\r\n\r\n The module configuration (your puzzle input) lists each module. The name of the module is preceded by a symbol identifying its type, if any. The name is then followed by an arrow and a list of its destination modules. For example:\r\n\r\n broadcaster -\u003e a, b, c %a -\u003e b %b -\u003e c %c -\u003e inv \u0026inv -\u003e a \r\n\r\nIn this module configuration, the broadcaster has three destination modules named a, b, and c. Each of these modules is a flip-flop module (as indicated by the % prefix). a outputs to b which outputs to c which outputs to another module named inv. inv is a conjunction module (as indicated by the \u0026 prefix) which, because it has only one input, acts like an inverter (it sends the opposite of the pulse type it receives); it outputs to a.\r\n\r\n By pushing the button once, the following pulses are sent:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a broadcaster -low-\u003e b broadcaster -low-\u003e c a -high-\u003e b b -high-\u003e c c -high-\u003e inv inv -low-\u003e a a -low-\u003e b b -low-\u003e c c -low-\u003e inv inv -high-\u003e a \r\n\r\nAfter this sequence, the flip-flop modules all end up off, so pushing the button again repeats the same sequence.\r\n\r\n Here's a more interesting example:\r\n\r\n broadcaster - a %a - inv, con \u0026inv - b %b - con \u0026con - output \r\n\r\nThis module configuration includes the broadcaster, two flip-flops (named a and b), a single-input conjunction module (inv), a multi-input conjunction module (con), and an untyped module named output (for testing purposes). The multi-input conjunction module con watches the two flip-flop modules and, if they're both on, sends a low pulse to the output module.\r\n\r\n Here's what happens if you push the button once:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -high-\u003e inv a -high-\u003e con inv -low-\u003e b con -high-\u003e output b -high-\u003e con con -low-\u003e output \r\n\r\nBoth flip-flops turn on and a low pulse is sent to output! However, now that both flip-flops are on and con remembers a high pulse from each of its two inputs, pushing the button a second time does something different:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -low-\u003e inv a -low-\u003e con inv -high-\u003e b con -high-\u003e output \r\n\r\nFlip-flop a turns off! Now, con remembers a low pulse from module a, and so it sends only a high pulse to output.\r\n\r\n Push the button a third time:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -high-\u003e inv a -high-\u003e con inv -low-\u003e b con -low-\u003e output b -low-\u003e con con -high-\u003e output \r\n\r\nThis time, flip-flop a turns on, then flip-flop b turns off. However, before b can turn off, the pulse sent to con is handled first, so it briefly remembers all high pulses for its inputs and sends a low pulse to output. After that, flip-flop b turns off, which causes con to update its state and send a high pulse to output.\r\n\r\n Finally, with a on and b off, push the button a fourth time:\r\n\r\n button -low-\u003e broadcaster broadcaster -low-\u003e a a -low-\u003e inv a -low-\u003e con inv -high-\u003e b con -high-\u003e output \r\n\r\nThis completes the cycle: a turns off, causing con to remember only low pulses and restoring all modules to their original states.\r\n\r\n To get the cables warmed up, the Elves have pushed the button 1000 times. How many pulses got sent as a result (including the pulses sent by the button itself)?\r\n\r\n In the first example, the same thing happens every time the button is pushed: 8 low pulses and 4 high pulses are sent. So, after pushing the button 1000 times, 8000 low pulses and 4000 high pulses are sent. Multiplying these together gives 32000000.\r\n\r\n In the second example, after pushing the button 1000 times, 4250 low pulses and 2750 high pulses are sent. Multiplying these together gives 11687500.\r\n\r\n Consult your module configuration; determine the number of low pulses and high pulses that would be sent after pushing the button 1000 times, waiting for all pulses to be fully handled after each push of the button. What do you get if you multiply the total number of low pulses sent by the total number of high pulses sent?\r\n\r\n To begin, 20/input.\r\n\r\n \n========\nFirst few Lines of input files are:\n%vh -\u003e qc, rr\n\u0026pb -\u003e gf, gv, vp, qb, vr, hq, zj\n%zj -\u003e kn, pb\n%mm -\u003e dj\n%gp -\u003e cp\n\u0026dc -\u003e ns\n%qc -\u003e gp\n%dx -\u003e fq, dj\n%tg -\u003e nl, ks\n%pr -\u003e nl\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiPromptTemplate": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n{AOC_TASK}\n========\nFirst few Lines of input files are:\n{AOC_INPUT}\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiResponse": "Certainly! I'll provide you with the `main.go` file you need to solve the task. To keep things organized, I'll outline the logic for you:\n\n1. Parse the input file, creating models for all the modules and their connections.\n2. Implement logic that represents the propagation of pulses through the modules upon button push.\n3. Factor in the different behaviors for each module type.\n4. Run the simulation of pushing the button 1000 times and track the number of low and high pulses.\n5. Output the requested multiplication of low and high pulses.\n\nHere is the `main.go` program that solves the task:\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Pulse int\n\nconst (\n\tLow Pulse = iota\n\tHigh\n)\n\ntype Module interface {\n\tReceive(p Pulse)\n}\n\ntype Broadcaster struct {\n\tdestinations []Module\n}\n\ntype FlipFlop struct {\n\tname     string\n\tstate    bool\n\toutput   []Module\n}\n\ntype Conjunct struct {\n\tname     string\n\tinputs   map[Module]Pulse\n\toutput   []Module\n}\n\nfunc NewBroadcaster() *Broadcaster {\n\treturn \u0026Broadcaster{}\n}\n\nfunc (b *Broadcaster) Receive(p Pulse) {\n\tfor _, dest := range b.destinations {\n\t\tdest.Receive(p)\n\t}\n}\n\nfunc NewFlipFlop(name string) *FlipFlop {\n\treturn \u0026FlipFlop{name: name, state: false}\n}\n\nfunc (f *FlipFlop) Receive(p Pulse) {\n\tif p == Low {\n\t\tf.state = !f.state\n\t\tnextPulse := High\n\t\tif f.state {\n\t\t\tnextPulse = Low\n\t\t}\n\t\tfor _, dest := range f.output {\n\t\t\tdest.Receive(nextPulse)\n\t\t}\n\t}\n}\n\nfunc NewConjunct(name string) *Conjunct {\n\treturn \u0026Conjunct{name: name, inputs: make(map[Module]Pulse)}\n}\n\nfunc (c *Conjunct) Receive(p Pulse) {\n\tfor input := range c.inputs {\n\t\tc.inputs[input] = p\n\t}\n\n\tallHigh := true\n\tfor _, pulse := range c.inputs {\n\t\tif pulse == Low {\n\t\t\tallHigh = false\n\t\t\tbreak\n\t\t}\n\t}\n\n\tnextPulse := Low\n\tif !allHigh {\n\t\tnextPulse = High\n\t}\n\n\tfor _, dest := range c.output {\n\t\tdest.Receive(nextPulse)\n\t}\n}\n\nfunc parseModule(line string, modules map[string]Module) {\n\tparts := strings.Split(line, \" -\u003e \")\n\tmoduleName := strings.TrimSpace(parts[0])\n\tdestNames := strings.Split(parts[1], \", \")\n\tdests := make([]Module, 0)\n\n\tfor _, destName := range destNames {\n\t\tdestName = strings.TrimSpace(destName)\n\t\tdests = append(dests, modules[destName])\n\t}\n\n\tif strings.HasPrefix(moduleName, \"%\") {\n\t\tname := strings.TrimPrefix(moduleName, \"%\")\n\t\tmodules[name] = NewFlipFlop(name)\n\t\tfor _, dest := range dests {\n\t\t\tf := modules[name].(*FlipFlop)\n\t\t\tf.output = append(f.output, dest)\n\t\t}\n\t} else if strings.HasPrefix(moduleName, \"\u0026\") {\n\t\tname := strings.TrimPrefix(moduleName, \"\u0026\")\n\t\tmodules[name] = NewConjunct(name)\n\t\tfor _, dest := range dests {\n\t\t\tc := modules[name].(*Conjunct)\n\t\t\tfor _, src := range dests {\n\t\t\t\tc.inputs[src] = Low // Initialize with low pulse memory\n\t\t\t}\n\t\t\tc.output = append(c.output, dest)\n\t\t}\n\t} else if moduleName == \"broadcaster\" {\n\t\tb := NewBroadcaster()\n\t\tb.destinations = dests\n\t\tmodules[moduleName] = b\n\t}\n}\n\nfunc readInput(filename string) (map[string]Module, Module) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tmodules := make(map[string]Module)\n\tvar broadcaster Module\n\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, \"broadcaster\") {\n\t\t\t// Special treatment for the broadcaster\n\t\t\tparseModule(line, modules)\n\t\t\tbroadcaster = modules[\"broadcaster\"]\n\t\t} else {\n\t\t\tparseModule(line, modules)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn modules, broadcaster\n}\n\nfunc simulate(modules map[string]Module, broadcaster Module, iterations int) (lowCount, highCount int) {\n\tfor i := 0; i \u003c iterations; i++ { // Push the button 1000 times\n\t\tbroadcaster.Receive(Low) // Pushing the button sends a low pulse\n\t\tlowCount++\n\t}\n\n\t// Since the modules interact in sequence, we can track the actual pulses from conjunct modules\n\t// by examining how many times the `Receive` method is called with a Low or High pulse.\n\tfor _, module := range modules {\n\t\tswitch m := module.(type) {\n\t\tcase *FlipFlop:\n\t\t\tlowCount += m.state // If state is on, add 1\n\t\t\thighCount += 1 - (m.state) // If state is off, add 1\n\t\tcase *Conjunct:\n\t\t\tfor inputState := range m.inputs {\n\t\t\t\tpulse := m.inputs[inputState]\n\t\t\t\tif pulse == Low {\n\t\t\t\t\tlowCount++\n\t\t\t\t} else {\n\t\t\t\t\thighCount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lowCount, highCount\n}\n\nfunc main() {\n\tfilename := \"input.txt\"\n\tmodules, broadcaster := readInput(filename)\n\n\t// Simulate 1000 button pushes\n\tlowCount, highCount := simulate(modules, broadcaster, 1000)\n\tresult := lowCount * highCount\n\n\tfmt.Println(result)\n}\n```\n\nTo execute this program, you need to save it as `main.go` and run it with a Go compiler. Please make sure that the `input.txt` file is in the same directory as `main.go`. Upon execution, it will read from the specified `input.txt` file, run the simulation, and print the required result. You may need to adjust the code to improve efficiency, handle errors, or meet any additional task requirements that we overlooked.",
    "aiResponseCode": "\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\ntype Pulse int\n\nconst (\n\tLow Pulse = iota\n\tHigh\n)\n\ntype Module interface {\n\tReceive(p Pulse)\n}\n\ntype Broadcaster struct {\n\tdestinations []Module\n}\n\ntype FlipFlop struct {\n\tname     string\n\tstate    bool\n\toutput   []Module\n}\n\ntype Conjunct struct {\n\tname     string\n\tinputs   map[Module]Pulse\n\toutput   []Module\n}\n\nfunc NewBroadcaster() *Broadcaster {\n\treturn \u0026Broadcaster{}\n}\n\nfunc (b *Broadcaster) Receive(p Pulse) {\n\tfor _, dest := range b.destinations {\n\t\tdest.Receive(p)\n\t}\n}\n\nfunc NewFlipFlop(name string) *FlipFlop {\n\treturn \u0026FlipFlop{name: name, state: false}\n}\n\nfunc (f *FlipFlop) Receive(p Pulse) {\n\tif p == Low {\n\t\tf.state = !f.state\n\t\tnextPulse := High\n\t\tif f.state {\n\t\t\tnextPulse = Low\n\t\t}\n\t\tfor _, dest := range f.output {\n\t\t\tdest.Receive(nextPulse)\n\t\t}\n\t}\n}\n\nfunc NewConjunct(name string) *Conjunct {\n\treturn \u0026Conjunct{name: name, inputs: make(map[Module]Pulse)}\n}\n\nfunc (c *Conjunct) Receive(p Pulse) {\n\tfor input := range c.inputs {\n\t\tc.inputs[input] = p\n\t}\n\n\tallHigh := true\n\tfor _, pulse := range c.inputs {\n\t\tif pulse == Low {\n\t\t\tallHigh = false\n\t\t\tbreak\n\t\t}\n\t}\n\n\tnextPulse := Low\n\tif !allHigh {\n\t\tnextPulse = High\n\t}\n\n\tfor _, dest := range c.output {\n\t\tdest.Receive(nextPulse)\n\t}\n}\n\nfunc parseModule(line string, modules map[string]Module) {\n\tparts := strings.Split(line, \" -\u003e \")\n\tmoduleName := strings.TrimSpace(parts[0])\n\tdestNames := strings.Split(parts[1], \", \")\n\tdests := make([]Module, 0)\n\n\tfor _, destName := range destNames {\n\t\tdestName = strings.TrimSpace(destName)\n\t\tdests = append(dests, modules[destName])\n\t}\n\n\tif strings.HasPrefix(moduleName, \"%\") {\n\t\tname := strings.TrimPrefix(moduleName, \"%\")\n\t\tmodules[name] = NewFlipFlop(name)\n\t\tfor _, dest := range dests {\n\t\t\tf := modules[name].(*FlipFlop)\n\t\t\tf.output = append(f.output, dest)\n\t\t}\n\t} else if strings.HasPrefix(moduleName, \"\u0026\") {\n\t\tname := strings.TrimPrefix(moduleName, \"\u0026\")\n\t\tmodules[name] = NewConjunct(name)\n\t\tfor _, dest := range dests {\n\t\t\tc := modules[name].(*Conjunct)\n\t\t\tfor _, src := range dests {\n\t\t\t\tc.inputs[src] = Low // Initialize with low pulse memory\n\t\t\t}\n\t\t\tc.output = append(c.output, dest)\n\t\t}\n\t} else if moduleName == \"broadcaster\" {\n\t\tb := NewBroadcaster()\n\t\tb.destinations = dests\n\t\tmodules[moduleName] = b\n\t}\n}\n\nfunc readInput(filename string) (map[string]Module, Module) {\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tmodules := make(map[string]Module)\n\tvar broadcaster Module\n\n\tscanner := bufio.NewScanner(file)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif strings.Contains(line, \"broadcaster\") {\n\t\t\t// Special treatment for the broadcaster\n\t\t\tparseModule(line, modules)\n\t\t\tbroadcaster = modules[\"broadcaster\"]\n\t\t} else {\n\t\t\tparseModule(line, modules)\n\t\t}\n\t}\n\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn modules, broadcaster\n}\n\nfunc simulate(modules map[string]Module, broadcaster Module, iterations int) (lowCount, highCount int) {\n\tfor i := 0; i \u003c iterations; i++ { // Push the button 1000 times\n\t\tbroadcaster.Receive(Low) // Pushing the button sends a low pulse\n\t\tlowCount++\n\t}\n\n\t// Since the modules interact in sequence, we can track the actual pulses from conjunct modules\n\t// by examining how many times the `Receive` method is called with a Low or High pulse.\n\tfor _, module := range modules {\n\t\tswitch m := module.(type) {\n\t\tcase *FlipFlop:\n\t\t\tlowCount += m.state // If state is on, add 1\n\t\t\thighCount += 1 - (m.state) // If state is off, add 1\n\t\tcase *Conjunct:\n\t\t\tfor inputState := range m.inputs {\n\t\t\t\tpulse := m.inputs[inputState]\n\t\t\t\tif pulse == Low {\n\t\t\t\t\tlowCount++\n\t\t\t\t} else {\n\t\t\t\t\thighCount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lowCount, highCount\n}\n\nfunc main() {\n\tfilename := \"input.txt\"\n\tmodules, broadcaster := readInput(filename)\n\n\t// Simulate 1000 button pushes\n\tlowCount, highCount := simulate(modules, broadcaster, 1000)\n\tresult := lowCount * highCount\n\n\tfmt.Println(result)\n}\n",
    "aiAnswerFound": false
  },
  "aocSolve": {
    "attemptAllowSubmit": true
  }
}