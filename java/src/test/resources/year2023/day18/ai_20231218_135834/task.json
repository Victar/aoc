{
  "aocTask": {
    "text": "/\r\n/2023/about\r\n/2023/events\r\nhttps://teespring.com/stores/advent-of-code\r\n/2023/settings\r\n/2023/auth/logout\r\nllljjjiii /2023/support 28*\r\n\r\nÂ {'year':/2023}\r\n\r\n\r\n/2023\r\n/2023/support\r\n/2023/sponsors\r\n/2023/leaderboard\r\n/2023/stats\r\n Our /2023/sponsors help make Advent of Code possible:https://www.hapag-lloyd.com/en/company/career/working-in-tech/overview.html - Discover boundless horizons in Hapag-Lloyd's IT division! Sail alongside our team, craft solutions \u0026 forge the future of technology. \r\n\r\n--- Day 18: Lavaduct Lagoon ---\r\n\r\nThanks to your efforts, the machine parts factory is one of the first factories up and running since the lavafall came back. However, to catch up with the large backlog of parts requests, the factory will also need a large supply of lava for a while; the Elves have already started creating a large lagoon nearby for this purpose.\r\n\r\n However, they aren't sure the lagoon will be big enough; they've asked you to take a look at the dig plan (your puzzle input). For example:\r\n\r\n R 6 (#70c710) D 5 (#0dc571) L 2 (#5713f0) D 2 (#d2c081) R 2 (#59c680) D 2 (#411b91) L 5 (#8ceee2) U 2 (#caa173) L 1 (#1b58a2) U 2 (#caa171) R 2 (#7807d2) U 3 (#a77fa3) L 2 (#015232) U 2 (#7a21e3) \r\n\r\nThe digger starts in a 1 meter cube hole in the ground. They then dig the specified number of meters up (U), down (D), left (L), or right (R), clearing full 1 meter cubes as they go. The directions are given as seen from above, so if \"up\" were north, then \"right\" would be east, and so on. Each trench is also listed with the color that the edge of the trench should be painted as an https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations.\r\n\r\n When viewed from above, the above example dig plan would result in the following loop of trench (#) having been dug out from otherwise ground-level terrain (.):\r\n\r\n ####### #.....# ###...# ..#...# ..#...# ###.### #...#.. ##..### .#....# .###### \r\n\r\nAt this point, the trench could contain 38 cubic meters of lava. However, this is just the edge of the lagoon; the next step is to dig out the interior so that it is one meter deep as well:\r\n\r\n ####### ####### ####### ..##### ..##### ####### #####.. ####### .###### .###### \r\n\r\nNow, the lagoon can contain a much more respectable 62 cubic meters of lava. While the interior is dug out, the edges are also painted according to the color codes in the dig plan.\r\n\r\n The Elves are concerned the lagoon won't be large enough; if they follow their dig plan, how many cubic meters of lava could it hold?\r\n\r\n Your puzzle answer was 68115.\r\n\r\nThe first half of this puzzle is complete! It provides one gold star: *\r\n\r\n --- Part Two ---\r\n\r\nThe Elves were right to be concerned; the planned lagoon would be much too small.\r\n\r\n After a few minutes, someone realizes what happened; someone swapped the color and instruction parameters when producing the dig plan. They don't have time to fix the bug; one of them asks if you can extract the correct instructions from the hexadecimal codes.\r\n\r\n Each hexadecimal code is six hexadecimal digits long. The first five hexadecimal digits encode the distance in meters as a five-digit hexadecimal number. The last hexadecimal digit encodes the direction to dig: 0 means R, 1 means D, 2 means L, and 3 means U.\r\n\r\n So, in the above example, the hexadecimal codes can be converted into the true instructions:\r\n\r\n \r\n#70c710 = R 461937 \r\n#0dc571 = D 56407 \r\n#5713f0 = R 356671 \r\n#d2c081 = D 863240 \r\n#59c680 = R 367720 \r\n#411b91 = D 266681 \r\n#8ceee2 = L 577262 \r\n#caa173 = U 829975 \r\n#1b58a2 = L 112010 \r\n#caa171 = D 829975 \r\n#7807d2 = L 491645 \r\n#a77fa3 = U 686074 \r\n#015232 = L 5411 \r\n#7a21e3 = U 500254 \r\n \r\n\r\nDigging out this loop and its interior produces a lagoon that can hold an impressive 952408144115 cubic meters of lava.\r\n\r\n Convert the hexadecimal color codes into the correct instructions; if the Elves follow this new dig plan, how many cubic meters of lava could the lagoon hold?\r\n\r\n Answer: \r\n\r\n Although it hasn't changed, you can still 18/input.\r\n\r\n You can also [Shareon https://twitter.com/intent/tweet?text=I%27ve+completed+Part+One+of+%22Lavaduct+Lagoon%22+%2D+Day+18+%2D+Advent+of+Code+2023\u0026url=https%3A%2F%2Fadventofcode%2Ecom%2F2023%2Fday%2F18\u0026related=ericwastl\u0026hashtags=AdventOfCode https://] this puzzle.\r\n\r\n ",
    "input": "R 9 (#521d52)\nU 5 (#11e893)\nR 4 (#079312)\nU 4 (#5458e3)\nR 7 (#233422)\nU 3 (#664171)\nL 3 (#475012)\nU 6 (#312e21)\nR 6 (#024a22)\nU 3 (#335f61)\nL 6 (#699da2)\nU 4 (#3d7d41)\nL 6 (#699da0)\nU 7 (#125e51)\nL 3 (#1861e2)\nD 7 (#09f8e1)\nL 4 (#70eb32)\nD 10 (#31c8a3)\nR 4 (#0685e2)\nD 3 (#247e93)\nL 8 (#260972)\nU 7 (#36eca3)\nL 8 (#40b8d2)\nU 5 (#312e23)\nL 7 (#3c4242)\nU 8 (#50c7a3)\nR 6 (#21b062)\nU 7 (#443963)\nL 6 (#0f6920)\nU 5 (#2e1d73)\nL 3 (#6f8330)\nD 3 (#1a4943)\nL 5 (#5cebe2)\nD 12 (#27c9f3)\nR 5 (#220072)\nD 3 (#5adb73)\nL 6 (#317f72)\nD 2 (#053831)\nL 7 (#0c0802)\nU 5 (#124b51)\nL 5 (#198d90)\nD 11 (#46f3b1)\nL 5 (#198d92)\nD 2 (#5424f1)\nL 3 (#1232f2)\nU 4 (#408801)\nL 6 (#18cc52)\nU 4 (#3a6ed1)\nR 6 (#38c312)\nU 5 (#299193)\nL 3 (#2c9e72)\nU 3 (#5c2593)\nR 3 (#2cf822)\nU 5 (#33d851)\nR 4 (#1b0740)\nU 2 (#109221)\nR 9 (#1b0742)\nU 4 (#414cb1)\nL 7 (#0838d2)\nU 5 (#1ea173)\nL 2 (#3fcef2)\nU 7 (#3502f3)\nL 3 (#6d0672)\nU 3 (#0ea733)\nL 4 (#2c94c2)\nU 12 (#4ec103)\nL 4 (#041640)\nD 3 (#4bae23)\nL 3 (#4ff660)\nD 9 (#4bae21)\nL 4 (#458e90)\nD 7 (#202933)\nL 3 (#3fcef0)\nD 6 (#4b45b3)\nR 7 (#710a62)\nD 4 (#111783)\nR 4 (#264f12)\nD 4 (#19e183)\nL 5 (#361fa2)\nD 7 (#19e181)\nL 6 (#27a082)\nD 6 (#188573)\nL 7 (#187f60)\nU 8 (#343903)\nL 4 (#4719a0)\nU 4 (#1abc03)\nL 4 (#0e8d22)\nU 8 (#31faf3)\nL 3 (#7a8270)\nD 12 (#21cf23)\nL 4 (#7a8272)\nD 12 (#2cc503)\nR 4 (#0e8d20)\nD 5 (#0623c3)\nL 9 (#42cc80)\nU 3 (#320273)\nL 2 (#372482)\nU 5 (#11b943)\nL 7 (#10cb12)\nU 10 (#11b941)\nL 2 (#41f692)\nU 5 (#20ece3)\nL 5 (#13b450)\nU 6 (#367f33)\nL 3 (#2a3b50)\nD 9 (#1c7473)\nL 4 (#461d20)\nD 9 (#52f3a1)\nR 4 (#0bc750)\nD 5 (#208061)\nL 6 (#34c310)\nD 2 (#058993)\nL 5 (#0a5680)\nD 6 (#0a6a63)\nL 10 (#1056f0)\nD 2 (#47eba3)\nL 5 (#1056f2)\nD 3 (#3bd443)\nL 7 (#20ad20)\nD 9 (#05bb21)\nL 2 (#1efac0)\nD 7 (#770991)\nL 7 (#429760)\nD 11 (#16ef21)\nL 2 (#365170)\nU 11 (#208063)\nL 8 (#77b350)\nU 6 (#4828a3)\nL 5 (#023210)\nU 5 (#23f413)\nL 3 (#45da92)\nU 4 (#3712a3)\nR 6 (#45da90)\nD 5 (#4805f3)\nR 3 (#1d94d0)\nU 5 (#135023)\nR 5 (#12ee60)\nU 7 (#1ed111)\nL 4 (#1b3730)\nU 11 (#6b41c1)\nL 5 (#3ecd30)\nD 11 (#27e453)\nL 5 (#0e45d2)\nU 3 (#35a2b3)\nL 3 (#0e45d0)\nD 6 (#2c8bd3)\nL 3 (#510880)\nD 8 (#5860e3)\nL 5 (#318662)\nU 5 (#755013)\nL 3 (#318660)\nU 8 (#6ac523)\nL 3 (#233450)\nU 3 (#6aa731)\nL 4 (#498890)\nU 11 (#6aa733)\nR 2 (#46f1c0)\nU 10 (#41ea11)\nR 8 (#22c9f2)\nU 6 (#3198b1)\nR 6 (#7541d0)\nU 7 (#28ad81)\nR 6 (#7541d2)\nD 5 (#295961)\nR 9 (#22c9f0)\nU 5 (#396ab1)\nR 4 (#32ead0)\nU 8 (#4cd1e1)\nR 7 (#372ca0)\nU 5 (#192443)\nL 7 (#0df120)\nU 9 (#3417c3)\nL 5 (#2818d0)\nU 4 (#421ca1)\nR 6 (#444470)\nU 5 (#421ca3)\nL 9 (#147140)\nU 5 (#2c7e73)\nR 9 (#2c5cf0)\nU 3 (#6b8981)\nR 6 (#216860)\nU 6 (#37e4d1)\nR 4 (#10dd20)\nU 8 (#0f9fe1)\nR 3 (#596772)\nU 3 (#52ae11)\nR 7 (#596770)\nU 5 (#1cee91)\nR 4 (#3b6fc0)\nU 7 (#1dcb51)\nL 3 (#2360d0)\nU 4 (#643831)\nL 12 (#4537b0)\nU 4 (#180df1)\nR 9 (#31cd00)\nU 7 (#23f461)\nR 6 (#609520)\nU 7 (#10d611)\nR 3 (#2b2910)\nD 12 (#150921)\nR 5 (#45e700)\nD 5 (#4e7701)\nR 5 (#1eaa20)\nU 7 (#43e531)\nR 9 (#0f10f0)\nU 3 (#29c2d1)\nR 8 (#6ca0d0)\nU 10 (#28c611)\nR 3 (#19ef80)\nD 5 (#4d5381)\nR 9 (#30dd00)\nD 2 (#4c2151)\nR 4 (#480fe0)\nD 5 (#4bdcd1)\nR 4 (#4cc442)\nD 2 (#1122d1)\nR 3 (#08cce2)\nD 6 (#5309a1)\nR 4 (#1118f0)\nD 3 (#1e9b31)\nR 4 (#447830)\nD 10 (#0b6561)\nR 4 (#246dd0)\nD 7 (#5ca761)\nR 5 (#356150)\nD 4 (#09fb01)\nR 6 (#3786e2)\nD 7 (#5f9be1)\nR 7 (#42ca92)\nU 5 (#019611)\nR 8 (#1005b2)\nU 3 (#21ae81)\nR 6 (#173bf2)\nU 4 (#49b611)\nR 3 (#2022c0)\nU 6 (#33a5e1)\nR 8 (#3040d0)\nU 9 (#34b873)\nL 3 (#4a8800)\nU 2 (#34b871)\nL 5 (#06a780)\nU 5 (#08d321)\nL 4 (#4c2b40)\nU 6 (#696b43)\nL 4 (#1ca7c0)\nD 9 (#454c43)\nL 2 (#1f13f0)\nD 2 (#078593)\nL 7 (#1135a0)\nU 9 (#0641a3)\nR 3 (#0bf850)\nU 10 (#6b57e3)\nR 3 (#2d9de2)\nU 4 (#5f4661)\nR 7 (#33d1f2)\nU 6 (#5f4663)\nR 5 (#5a9aa2)\nU 6 (#4fc703)\nR 2 (#4f6cf0)\nU 2 (#0b8203)\nR 11 (#3efc40)\nU 5 (#0b8201)\nR 12 (#2da140)\nU 7 (#20f823)\nR 2 (#380710)\nU 6 (#339af3)\nR 3 (#514cf0)\nD 11 (#087ee3)\nR 7 (#4ad610)\nU 11 (#0e30f1)\nR 7 (#1235d2)\nU 9 (#60a251)\nL 6 (#3c6422)\nU 5 (#60a253)\nL 8 (#33f7d2)\nD 6 (#35e7b1)\nL 6 (#511ed2)\nU 6 (#087321)\nL 5 (#2e2a40)\nU 6 (#38d611)\nR 7 (#233f70)\nU 4 (#143ab1)\nL 10 (#05c470)\nU 4 (#007f61)\nL 5 (#189c70)\nU 4 (#633781)\nR 6 (#568f40)\nU 4 (#258a01)\nR 4 (#0d56c0)\nD 4 (#4866e1)\nR 5 (#4b3420)\nU 3 (#060511)\nR 5 (#100980)\nD 10 (#636631)\nR 2 (#230f20)\nD 3 (#1720b1)\nR 4 (#160300)\nD 2 (#3075f3)\nR 4 (#773320)\nU 2 (#370a93)\nR 3 (#6201c0)\nU 11 (#130763)\nR 8 (#24c420)\nD 9 (#130761)\nR 4 (#4767f0)\nD 4 (#49bd53)\nR 5 (#183ae2)\nD 6 (#36b133)\nL 5 (#6b61f2)\nD 7 (#36b131)\nL 4 (#2a6482)\nD 7 (#4570b3)\nR 6 (#202c82)\nD 4 (#30c3c3)\nR 7 (#2fc410)\nD 8 (#11c203)\nL 8 (#320302)\nD 6 (#1b7b81)\nL 3 (#3abe32)\nD 5 (#1b7b83)\nR 6 (#3a3602)\nU 4 (#05b423)\nR 4 (#598dc0)\nD 4 (#65c873)\nR 3 (#289290)\nD 4 (#188db3)\nL 13 (#2d4af0)\nD 5 (#6ee023)\nR 5 (#3397f0)\nD 3 (#0da5b1)\nR 4 (#1609e0)\nD 4 (#41bb51)\nR 6 (#1609e2)\nD 6 (#380cd1)\nL 6 (#258f60)\nD 5 (#216c73)\nR 2 (#064860)\nD 6 (#207401)\nR 9 (#32e360)\nU 3 (#6788e1)\nR 3 (#47de70)\nD 6 (#74c7a1)\nR 4 (#3b9830)\nD 6 (#05b631)\nL 4 (#5ab730)\nD 3 (#24c2a1)\nR 7 (#090620)\nU 3 (#3e5ff1)\nR 10 (#090622)\nU 7 (#608001)\nL 10 (#150b40)\nU 5 (#1720b3)\nR 6 (#44c360)\nU 8 (#2da851)\nR 6 (#1d1a12)\nU 2 (#21ae41)\nR 2 (#1f8822)\nU 10 (#2d6d01)\nL 3 (#4d4f22)\nU 3 (#2d6d03)\nL 12 (#2c7712)\nU 5 (#21ae43)\nL 9 (#20c892)\nU 7 (#673681)\nR 9 (#0c0af0)\nU 3 (#2a40e1)\nR 4 (#28f0f0)\nU 6 (#5e5341)\nL 5 (#297c60)\nU 5 (#42a051)\nL 9 (#005880)\nU 6 (#538613)\nR 6 (#61c700)\nU 5 (#4d6d83)\nR 8 (#0182a0)\nU 10 (#2a40e3)\nR 5 (#151690)\nU 3 (#4d7ec1)\nR 3 (#69ded0)\nU 7 (#0b8c11)\nR 4 (#13bee0)\nU 2 (#322da1)\nR 5 (#5c33e0)\nU 4 (#3a9c31)\nR 9 (#0736e0)\nD 4 (#1b39f1)\nR 5 (#74b5d0)\nU 8 (#1b39f3)\nR 6 (#02c790)\nU 10 (#3a9c33)\nR 8 (#40c600)\nD 3 (#29d881)\nR 4 (#161380)\nD 11 (#1c3d61)\nL 4 (#6504e0)\nD 3 (#2b9b31)\nR 6 (#1027c0)\nD 5 (#07c691)\nR 5 (#311262)\nD 4 (#469be1)\nL 6 (#0a5bd2)\nD 6 (#2f4b21)\nL 6 (#322842)\nU 6 (#10e413)\nL 5 (#2a9462)\nD 7 (#10e411)\nL 3 (#2f7a02)\nD 6 (#235971)\nR 4 (#448cf0)\nD 6 (#5bc301)\nR 7 (#210c00)\nU 6 (#5bc303)\nR 5 (#2b19f0)\nD 3 (#356581)\nR 4 (#05df90)\nD 7 (#266a01)\nL 11 (#276a82)\nD 5 (#5db6f1)\nR 11 (#4fbb22)\nD 8 (#0025a1)\nR 6 (#69d482)\nU 7 (#409023)\nR 8 (#505ec2)\nU 2 (#1d4c73)\nR 6 (#1c0e12)\nD 7 (#495463)\nR 4 (#534350)\nD 9 (#2a6303)\nL 10 (#3d5a02)\nD 4 (#507ae3)\nR 10 (#3d5a00)\nD 7 (#2d06a3)\nR 7 (#534352)\nD 3 (#03d713)\nR 8 (#3c33d2)\nD 7 (#5bfcf1)\nR 3 (#08c0b0)\nD 2 (#3008b1)\nR 8 (#08c0b2)\nD 4 (#737891)\nR 10 (#05e2d2)\nD 3 (#19a591)\nR 2 (#7106d0)\nD 4 (#332231)\nR 11 (#1d8ae2)\nU 3 (#315711)\nL 8 (#1d8ae0)\nU 4 (#60da61)\nL 2 (#5792c2)\nU 7 (#2095a1)\nL 7 (#197412)\nU 3 (#446241)\nL 6 (#501ba2)\nU 3 (#2b8793)\nL 3 (#2608a2)\nU 3 (#3a64c3)\nL 7 (#3d0f52)\nU 7 (#32efc3)\nL 4 (#447680)\nU 8 (#02e313)\nL 8 (#300890)\nU 8 (#4e0d13)\nR 5 (#0ec4c2)\nU 5 (#3a07f3)\nR 7 (#65ba52)\nU 5 (#201cf3)\nR 4 (#240b72)\nD 2 (#1bb531)\nR 6 (#612f22)\nD 5 (#4c28c1)\nL 4 (#22aaa2)\nD 8 (#3d7bc1)\nR 4 (#23b082)\nD 3 (#379b31)\nR 6 (#05e9e2)\nU 6 (#50a231)\nR 6 (#579442)\nU 3 (#50a233)\nL 6 (#1f1e42)\nU 7 (#379b33)\nR 4 (#1c99e2)\nU 2 (#20b9a1)\nR 7 (#3930c2)\nD 10 (#20b9a3)\nR 6 (#2827d2)\nU 7 (#2ee6f3)\nR 8 (#0c2ce2)\nU 3 (#43d703)\nR 3 (#34aec2)\nD 6 (#67c623)\nR 7 (#547012)\nD 12 (#032bf3)\nR 6 (#15b572)\nU 6 (#6af211)\nR 5 (#1ab422)\nD 6 (#476e93)\nR 9 (#137720)\nD 3 (#4279f3)\nR 4 (#1b0340)\nD 5 (#0e8663)\nL 8 (#74b070)\nD 5 (#0e8661)\nL 7 (#1de0e0)\nU 5 (#40a043)\nL 11 (#157592)\nD 2 (#2cbc01)\nL 6 (#1b5c72)\nD 3 (#04f753)\nR 4 (#615d92)\nD 5 (#04f751)\nR 13 (#16ea52)\nD 6 (#2cbc03)\nR 2 (#0f35b2)\nD 4 (#25a423)\nR 6 (#08bc22)\nD 6 (#603e43)\nR 7 (#4a5c22)\nD 10 (#507d21)\nR 7 (#6ba9b2)\nD 5 (#339b41)\nR 6 (#3603a2)\nD 5 (#416521)\nR 7 (#70c302)\nD 4 (#429121)\nL 4 (#477db2)\nD 5 (#117f11)\nR 10 (#249022)\nU 7 (#657d71)\nR 4 (#15b612)\nU 5 (#19b8e1)\nL 5 (#0d01e0)\nU 8 (#16b691)\nL 3 (#0d8a40)\nU 7 (#3022e1)\nR 8 (#55e320)\nU 10 (#0889d1)\nR 3 (#2e9000)\nU 6 (#49e261)\nR 4 (#0cbee0)\nU 4 (#1aa031)\nR 11 (#5fadc0)\nU 3 (#482851)\nR 2 (#22d1c2)\nU 4 (#2963b1)\nR 5 (#4681b2)\nU 7 (#47e8f1)\nL 6 (#1e3ff2)\nU 6 (#32f5f1)\nR 6 (#2fae52)\nU 3 (#7558d3)\nR 7 (#32c562)\nU 4 (#2ee9c3)\nR 6 (#2164d2)\nU 6 (#19cf81)\nR 4 (#6fbd62)\nD 3 (#35b691)\nR 9 (#3b0f00)\nD 5 (#1fe071)\nR 5 (#3cee10)\nD 5 (#3f7791)\nR 8 (#534340)\nD 4 (#3fb661)\nR 10 (#37c480)\nD 5 (#3fb663)\nR 2 (#6e47a0)\nD 11 (#033cc1)\nR 5 (#1f6410)\nD 6 (#0c70c1)\nL 7 (#0dd340)\nD 7 (#741ab1)\nL 5 (#0dd342)\nD 2 (#1a4621)\nL 7 (#315b10)\nD 6 (#36fbf1)\nL 8 (#58de52)\nD 8 (#42e691)\nL 3 (#58de50)\nD 3 (#08a3a1)\nR 6 (#357dd2)\nD 11 (#3d3941)\nR 5 (#455972)\nD 4 (#349ef1)\nR 8 (#07fd62)\nD 9 (#411051)\nR 6 (#582752)\nU 5 (#4ea411)\nR 3 (#1877c2)\nU 6 (#43e381)\nL 5 (#1877c0)\nU 5 (#26f251)\nR 5 (#34c742)\nU 10 (#50def3)\nR 3 (#0dab82)\nD 3 (#452e53)\nR 6 (#0dab80)\nD 4 (#236ca3)\nR 2 (#31ad52)\nD 3 (#5aab63)\nL 5 (#323322)\nD 10 (#1b03e3)\nR 5 (#4e67f2)\nD 6 (#092371)\nR 7 (#59a6c2)\nD 9 (#246113)\nR 4 (#262360)\nD 10 (#2143d3)\nL 8 (#3b1ce0)\nD 6 (#4de153)\nL 3 (#614042)\nD 8 (#346a63)\nL 8 (#32eec2)\nD 2 (#0a2f53)\nL 6 (#59ea12)\nD 2 (#3a25b1)\nL 6 (#42f560)\nD 8 (#6754a1)\nL 9 (#42f562)\nD 3 (#30a591)\nR 7 (#3f48b2)\nD 4 (#1d40b1)\nR 5 (#25e7c0)\nD 6 (#3e3901)\nR 8 (#25e7c2)\nU 10 (#545bd1)\nR 6 (#2855e2)\nD 11 (#161fa3)\nR 2 (#205752)\nD 5 (#0d60b3)\nL 3 (#1c5862)\nD 4 (#1e2c13)\nL 3 (#6292f2)\nD 7 (#253ac3)\nL 12 (#248f32)\nU 7 (#169ac3)\nL 7 (#018cf2)\nU 4 (#676241)\nL 3 (#043c52)\nD 11 (#161fa1)\nL 7 (#213b42)\nD 4 (#6d64e3)\nL 3 (#17acb0)\nD 6 (#212c53)\nL 4 (#674250)\nU 7 (#1551b3)\nL 12 (#7844a0)\nD 4 (#102593)\nL 2 (#70e432)\nD 3 (#3aa293)\nL 12 (#0ae382)\nD 6 (#277373)\nL 3 (#0e6692)\nU 6 (#5dd281)\nL 9 (#3f08d2)\nU 5 (#5dd283)\nL 2 (#2dfc92)\nU 3 (#3b1ad3)\nR 8 (#4b6390)\nU 10 (#422803)\nR 5 (#052de0)\nU 11 (#2f4123)\nL 6 (#59f040)\nU 3 (#4a9083)\nL 7 (#5b2a40)\nU 8 (#47b583)\nL 3 (#1a0f80)\nU 7 (#11d443)\nL 12 (#27b3c0)\nD 7 (#3cc073)\nL 6 (#63f0f0)\nD 3 (#2cca23)\nL 2 (#33cdb0)\nD 6 (#698a91)\nL 6 (#192830)\nD 4 (#588053)\nL 4 (#1946b0)\nD 6 (#5bf323)\nL 9 (#446402)\nD 7 (#1c7983)\nL 3 (#204152)\nD 8 (#0d93d3)\nL 5 (#3924d2)\nD 4 (#252e03)\nL 7 (#010c80)\nD 7 (#237943)\nL 9 (#010c82)\nD 4 (#33cf23)\nL 2 (#232b42)\nD 5 (#0a8cd1)\nR 4 (#627662)\nD 5 (#45a161)\nL 4 (#124a32)\nD 6 (#1d8e01)\nL 5 (#74c090)\nU 7 (#34ec01)\nL 5 (#36d532)\nU 4 (#03db81)\nR 5 (#6f5072)\nU 8 (#120e73)\nL 3 (#126e52)\nU 3 (#402c63)\nL 5 (#66ec72)\nU 7 (#1d1b63)\nL 3 (#3126f2)\nU 5 (#50e573)\nL 8 (#06c0e2)\nU 5 (#3833d3)\nL 3 (#13e8f2)\nU 6 (#59d571)\nL 4 (#478512)\nD 10 (#59d573)\nL 5 (#3ec962)\nU 10 (#255c03)\nL 5 (#08a472)\nU 6 (#5d8fd1)\nL 4 (#14c112)\nU 7 (#5f4443)\nL 4 (#293aa0)\nU 7 (#1aed53)\nL 2 (#311680)\nU 3 (#63fcc3)\nL 12 (#12d6a2)\nU 5 (#46b3c3)\nL 10 (#12d6a0)\nU 3 (#26d8f3)\nL 10 (#672d90)\nU 9 (#1f2ab3)\nR 8 (#517c62)\nU 10 (#68a6e3)\nL 8 (#2a9692)\nU 5 (#68a6e1)\nL 5 (#456bc2)\nD 4 (#142573)\nL 9 (#0a4712)\nD 7 (#0897f3)\nR 9 (#63e272)\nD 3 (#593dc3)\nL 4 (#63e270)\nD 10 (#415d53)\nL 6 (#459d72)\nD 5 (#1fbed3)\nL 8 (#49c7c2)\nD 4 (#09f433)\nL 2 (#742322)\nD 10 (#02b5c3)\nL 9 (#071b42)\nD 5 (#524e93)\nL 3 (#15a932)\nD 3 (#016c73)\nL 7 (#361b70)\nD 9 (#22a6a1)\nL 3 (#2f8ee0)\nD 7 (#22a6a3)\nL 2 (#2b3d40)\nD 4 (#4df853)\nL 7 (#45ff02)\nD 6 (#26fe93)\nL 10 (#5a0862)\nD 7 (#2d1e83)\nL 5 (#06e520)\nD 6 (#2410d3)\nL 9 (#1b49e0)\nD 2 (#46d233)\nL 7 (#32b7f0)\nD 8 (#67f703)\nL 5 (#296ba0)\nU 7 (#67f701)\nL 7 (#367c00)\nU 5 (#46d231)\nR 7 (#359260)\nU 3 (#2e68b3)\nL 4 (#450ba0)\nU 2 (#2f88f3)\nL 8 (#3ca9e2)\nD 7 (#1631d3)\nL 6 (#770e30)\nD 10 (#47c983)\nL 5 (#770e32)\nU 5 (#260fc3)\nL 12 (#3ca9e0)\nU 6 (#1ee513)\nR 12 (#75c272)\nU 3 (#0aadf3)\nL 2 (#0272a2)\nU 7 (#4ebd23)\n",
    "year": "2023",
    "day": "18",
    "silverSolved": true,
    "goldSolved": false
  },
  "aiSolver": {
    "aiModel": "gpt-4-1106-preview",
    "aiMaxTokens": 4096,
    "aiPrompt": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n--- Day 18: Lavaduct Lagoon ---\r\n\r\nThanks to your efforts, the machine parts factory is one of the first factories up and running since the lavafall came back. However, to catch up with the large backlog of parts requests, the factory will also need a large supply of lava for a while; the Elves have already started creating a large lagoon nearby for this purpose.\r\n\r\n However, they aren't sure the lagoon will be big enough; they've asked you to take a look at the dig plan (your puzzle input). For example:\r\n\r\n R 6 (#70c710) D 5 (#0dc571) L 2 (#5713f0) D 2 (#d2c081) R 2 (#59c680) D 2 (#411b91) L 5 (#8ceee2) U 2 (#caa173) L 1 (#1b58a2) U 2 (#caa171) R 2 (#7807d2) U 3 (#a77fa3) L 2 (#015232) U 2 (#7a21e3) \r\n\r\nThe digger starts in a 1 meter cube hole in the ground. They then dig the specified number of meters up (U), down (D), left (L), or right (R), clearing full 1 meter cubes as they go. The directions are given as seen from above, so if \"up\" were north, then \"right\" would be east, and so on. Each trench is also listed with the color that the edge of the trench should be painted as an https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations.\r\n\r\n When viewed from above, the above example dig plan would result in the following loop of trench (#) having been dug out from otherwise ground-level terrain (.):\r\n\r\n ####### #.....# ###...# ..#...# ..#...# ###.### #...#.. ##..### .#....# .###### \r\n\r\nAt this point, the trench could contain 38 cubic meters of lava. However, this is just the edge of the lagoon; the next step is to dig out the interior so that it is one meter deep as well:\r\n\r\n ####### ####### ####### ..##### ..##### ####### #####.. ####### .###### .###### \r\n\r\nNow, the lagoon can contain a much more respectable 62 cubic meters of lava. While the interior is dug out, the edges are also painted according to the color codes in the dig plan.\r\n\r\n The Elves are concerned the lagoon won't be large enough; if they follow their dig plan, how many cubic meters of lava could it hold?\r\n\r\n Your puzzle answer was 68115.\r\n\r\nThe first half of this puzzle is complete! It provides one gold star: *\r\n\r\n --- Part Two ---\r\n\r\nThe Elves were right to be concerned; the planned lagoon would be much too small.\r\n\r\n After a few minutes, someone realizes what happened; someone swapped the color and instruction parameters when producing the dig plan. They don't have time to fix the bug; one of them asks if you can extract the correct instructions from the hexadecimal codes.\r\n\r\n Each hexadecimal code is six hexadecimal digits long. The first five hexadecimal digits encode the distance in meters as a five-digit hexadecimal number. The last hexadecimal digit encodes the direction to dig: 0 means R, 1 means D, 2 means L, and 3 means U.\r\n\r\n So, in the above example, the hexadecimal codes can be converted into the true instructions:\r\n\r\n \r\n#70c710 = R 461937 \r\n#0dc571 = D 56407 \r\n#5713f0 = R 356671 \r\n#d2c081 = D 863240 \r\n#59c680 = R 367720 \r\n#411b91 = D 266681 \r\n#8ceee2 = L 577262 \r\n#caa173 = U 829975 \r\n#1b58a2 = L 112010 \r\n#caa171 = D 829975 \r\n#7807d2 = L 491645 \r\n#a77fa3 = U 686074 \r\n#015232 = L 5411 \r\n#7a21e3 = U 500254 \r\n \r\n\r\nDigging out this loop and its interior produces a lagoon that can hold an impressive 952408144115 cubic meters of lava.\r\n\r\n Convert the hexadecimal color codes into the correct instructions; if the Elves follow this new dig plan, how many cubic meters of lava could the lagoon hold?\r\n\r\n \n========\nFirst few Lines of input files are:\nR 9 (#521d52)\nU 5 (#11e893)\nR 4 (#079312)\nU 4 (#5458e3)\nR 7 (#233422)\nU 3 (#664171)\nL 3 (#475012)\nU 6 (#312e21)\nR 6 (#024a22)\nU 3 (#335f61)\n...\nPlease be careful with all the requirements and solve 2nd part using Pick's theorem",
    "aiPromptTemplate": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n{AOC_TASK}\n========\nFirst few Lines of input files are:\n{AOC_INPUT}\n...\nPlease be careful with all the requirements and solve 2nd part using Pick's theorem",
    "aiResponse": "Below is the `main.go` Go program that reads the `input.txt` file, interprets the instructions using hexadecimal color codes, and calculates the area of the lagoon based on the new dig plan:\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/big\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Point struct {\n\tX, Y int64\n}\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tvar instructions []string\n\tfor scanner.Scan() {\n\t\tline := strings.Trim(scanner.Text(), \" \")\n\t\tinstructions = append(instructions, strings.Split(line, \" \")...)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar points []Point\n\tcurrent := Point{0, 0}\n\tpoints = append(points, current)\n\n\tfor _, instruction := range instructions {\n\t\thexColor := strings.TrimSpace(instruction[8:15])\n\t\tdistance, direction := parseInstruction(hexColor)\n\t\tswitch direction {\n\t\tcase 'R':\n\t\t\tcurrent.X += distance\n\t\tcase 'U':\n\t\t\tcurrent.Y += distance\n\t\tcase 'L':\n\t\t\tcurrent.X -= distance\n\t\tcase 'D':\n\t\t\tcurrent.Y -= distance\n\t\t}\n\t\tpoints = append(points, current)\n\t}\n\n\tarea := calculateLavaArea(points)\n\tfmt.Println(area)\n}\n\nfunc parseInstruction(hexColor string) (int64, rune) {\n\tdistance, _ := strconv.ParseInt(hexColor[:5], 16, 64)\n\tdirectionCode, _ := strconv.ParseInt(string(hexColor[5]), 16, 0)\n\tvar direction rune\n\tswitch directionCode {\n\tcase 0:\n\t\tdirection = 'R'\n\tcase 1:\n\t\tdirection = 'D'\n\tcase 2:\n\t\tdirection = 'L'\n\tcase 3:\n\t\tdirection = 'U'\n\t}\n\treturn distance, direction\n}\n\n// Pick's theorem: A = I + B/2 - 1, where A is the area, I is the number of integer lattice points inside the polygon,\n// B is the number of integer lattice points on the border, and -1 is a constant adjustment.\nfunc calculateLavaArea(points []Point) *big.Int {\n\tvar boundaryPoints, interiorPoints int64\n\n\t// Calculate the boundary points by gcd algorithm\n\tfor i := 0; i \u003c len(points); i++ {\n\t\tnextIndex := (i + 1) % len(points)\n\t\tboundaryPoints += gcd(abs(points[nextIndex].X-points[i].X), abs(points[nextIndex].Y-points[i].Y))\n\t}\n\n\t// Calculate the interior points using Shoelace formula\n\tvar area *big.Int\n\tarea = big.NewInt(0)\n\tfor i := 0; i \u003c len(points); i++ {\n\t\tnextIndex := (i + 1) % len(points)\n\t\tarea.Add(area, big.NewInt((points[i].X*points[nextIndex].Y)-(points[i].Y*points[nextIndex].X)))\n\t}\n\tarea.Div(area, big.NewInt(2))\n\tarea.Abs(area)\n\n\t// Convert to int64 for the calculation of boundaryPoints/2 - 1\n\tlavaArea := new(big.Int).SetInt64((boundaryPoints - 2) / 2)\n\tlavaArea.Add(area, lavaArea)\n\n\treturn lavaArea\n}\n\n// gcd calculates the greatest common divisor using Euclidean algorithm\nfunc gcd(a, b int64) int64 {\n\tif b == 0 {\n\t\treturn a\n\t}\n\treturn gcd(b, a%b)\n}\n\n// abs calculates the absolute value of a 64-bit integer\nfunc abs(x int64) int64 {\n\tif x \u003c 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n```\n\nThis `main.go` file reads the `input.txt` file for instructions encoded as hex color codes. After interpreting them into distances and directions, it constructs a list of points describing the boundary of the dig plan. The program then calculates the area that the lagoon could hold using Pick's theorem and output the result.\n\nMake sure to create `input.txt` with the given example or your puzzle input in the same directory as `main.go` to run this program. The program will print the answer to the console.",
    "aiResponseCode": "\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/big\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Point struct {\n\tX, Y int64\n}\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tvar instructions []string\n\tfor scanner.Scan() {\n\t\tline := strings.Trim(scanner.Text(), \" \")\n\t\tinstructions = append(instructions, strings.Split(line, \" \")...)\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar points []Point\n\tcurrent := Point{0, 0}\n\tpoints = append(points, current)\n\n\tfor _, instruction := range instructions {\n\t\thexColor := strings.TrimSpace(instruction[8:15])\n\t\tdistance, direction := parseInstruction(hexColor)\n\t\tswitch direction {\n\t\tcase 'R':\n\t\t\tcurrent.X += distance\n\t\tcase 'U':\n\t\t\tcurrent.Y += distance\n\t\tcase 'L':\n\t\t\tcurrent.X -= distance\n\t\tcase 'D':\n\t\t\tcurrent.Y -= distance\n\t\t}\n\t\tpoints = append(points, current)\n\t}\n\n\tarea := calculateLavaArea(points)\n\tfmt.Println(area)\n}\n\nfunc parseInstruction(hexColor string) (int64, rune) {\n\tdistance, _ := strconv.ParseInt(hexColor[:5], 16, 64)\n\tdirectionCode, _ := strconv.ParseInt(string(hexColor[5]), 16, 0)\n\tvar direction rune\n\tswitch directionCode {\n\tcase 0:\n\t\tdirection = 'R'\n\tcase 1:\n\t\tdirection = 'D'\n\tcase 2:\n\t\tdirection = 'L'\n\tcase 3:\n\t\tdirection = 'U'\n\t}\n\treturn distance, direction\n}\n\n// Pick's theorem: A = I + B/2 - 1, where A is the area, I is the number of integer lattice points inside the polygon,\n// B is the number of integer lattice points on the border, and -1 is a constant adjustment.\nfunc calculateLavaArea(points []Point) *big.Int {\n\tvar boundaryPoints, interiorPoints int64\n\n\t// Calculate the boundary points by gcd algorithm\n\tfor i := 0; i \u003c len(points); i++ {\n\t\tnextIndex := (i + 1) % len(points)\n\t\tboundaryPoints += gcd(abs(points[nextIndex].X-points[i].X), abs(points[nextIndex].Y-points[i].Y))\n\t}\n\n\t// Calculate the interior points using Shoelace formula\n\tvar area *big.Int\n\tarea = big.NewInt(0)\n\tfor i := 0; i \u003c len(points); i++ {\n\t\tnextIndex := (i + 1) % len(points)\n\t\tarea.Add(area, big.NewInt((points[i].X*points[nextIndex].Y)-(points[i].Y*points[nextIndex].X)))\n\t}\n\tarea.Div(area, big.NewInt(2))\n\tarea.Abs(area)\n\n\t// Convert to int64 for the calculation of boundaryPoints/2 - 1\n\tlavaArea := new(big.Int).SetInt64((boundaryPoints - 2) / 2)\n\tlavaArea.Add(area, lavaArea)\n\n\treturn lavaArea\n}\n\n// gcd calculates the greatest common divisor using Euclidean algorithm\nfunc gcd(a, b int64) int64 {\n\tif b == 0 {\n\t\treturn a\n\t}\n\treturn gcd(b, a%b)\n}\n\n// abs calculates the absolute value of a 64-bit integer\nfunc abs(x int64) int64 {\n\tif x \u003c 0 {\n\t\treturn -x\n\t}\n\treturn x\n}\n",
    "aiAnswerFound": false
  },
  "aocSolve": {
    "attemptAllowSubmit": true
  }
}