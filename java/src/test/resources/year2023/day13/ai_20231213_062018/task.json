{
  "aocTask": {
    "text": "/\r\n/2023/about\r\n/2023/events\r\nhttps://teespring.com/stores/advent-of-code\r\n/2023/settings\r\n/2023/auth/logout\r\nllljjjiii /2023/support 21*\r\n\r\n   0x0000|/2023\r\n\r\n\r\n/2023\r\n/2023/support\r\n/2023/sponsors\r\n/2023/leaderboard\r\n/2023/stats\r\n Our /2023/sponsors help make Advent of Code possible:https://www.epilog.net/en/career - Join the SW development team conquering the world from Slovenia. \r\n\r\n--- Day 13: Point of Incidence ---\r\n\r\nWith your help, the hot springs team locates an appropriate spring which launches you neatly and precisely up to the edge of Lava Island.\r\n\r\n There's just one problem: you don't see any lava.\r\n\r\n You do see a lot of ash and igneous rock; there are even what look like gray mountains scattered around. After a while, you make your way to a nearby cluster of mountains only to discover that the valley between them is completely full of large mirrors. Most of the mirrors seem to be aligned in a consistent way; perhaps you should head in that direction?\r\n\r\n As you move through the valley of mirrors, you find that several of them have fallen from the large metal frames keeping them in place. The mirrors are extremely flat and shiny, and many of the fallen mirrors have lodged into the ash at strange angles. Because the terrain is all one color, it's hard to tell where it's safe to walk or where you're about to run into a mirror.\r\n\r\n You note down the patterns of ash (.) and rocks (#) that you see as you walk (your puzzle input); perhaps by carefully analyzing these patterns, you can figure out where the mirrors are!\r\n\r\n For example:\r\n\r\n #.##..##. ..#.##.#. ##......# ##......# ..#.##.#. ..##..##. #.#.##.#. #...##..# #....#..# ..##..### #####.##. #####.##. ..##..### #....#..# \r\n\r\nTo find the reflection in each pattern, you need to find a perfect reflection across either a horizontal line between two rows or across a vertical line between two columns.\r\n\r\n In the first pattern, the reflection is across a vertical line between two columns; arrows on each of the two columns point at the line between the columns:\r\n\r\n 123456789 \u003e\u003c #.##..##. ..#.##.#. ##......# ##......# ..#.##.#. ..##..##. #.#.##.#. \u003e\u003c 123456789 \r\n\r\nIn this pattern, the line of reflection is the vertical line between columns 5 and 6. Because the vertical line is not perfectly in the middle of the pattern, part of the pattern (column 1) has nowhere to reflect onto and can be ignored; every other column has a reflected column within the pattern and must match exactly: column 2 matches column 9, column 3 matches 8, 4 matches 7, and 5 matches 6.\r\n\r\n The second pattern reflects across a horizontal line instead:\r\n\r\n 1 #...##..# 1 2 #....#..# 2 3 ..##..### 3 4v#####.##.v4 5^#####.##.^5 6 ..##..### 6 7 #....#..# 7 \r\n\r\nThis pattern reflects across the horizontal line between rows 4 and 5. Row 1 would reflect with a hypothetical row 8, but since that's not in the pattern, row 1 doesn't need to match anything. The remaining rows match: row 2 matches row 7, row 3 matches row 6, and row 4 matches row 5.\r\n\r\n To summarize your pattern notes, add up the number of columns to the left of each vertical line of reflection; to that, also add 100 multiplied by the number of rows above each horizontal line of reflection. In the above example, the first pattern's vertical line has 5 columns to its left and the second pattern's horizontal line has 4 rows above it, a total of 405.\r\n\r\n Find the line of reflection in each of the patterns in your notes. What number do you get after summarizing all of your notes?\r\n\r\n To begin, 13/input.\r\n\r\n Answer: \r\n\r\n You can also [Shareon https://twitter.com/intent/tweet?text=%22Point+of+Incidence%22+%2D+Day+13+%2D+Advent+of+Code+2023\u0026url=https%3A%2F%2Fadventofcode%2Ecom%2F2023%2Fday%2F13\u0026related=ericwastl\u0026hashtags=AdventOfCode https://] this puzzle.\r\n\r\n ",
    "input": "...#..##.####.#\n##..##.###..###\n#.#............\n#...#...#..#.#.\n.#..###.#.##.#.\n###.###.##..##.\n.....##........\n##..#....#..#..\n#....#...#..#..\n#..##.#.#.##.#.\n#..##.#.#.##.#.\n#....#...#..#..\n##..#....#..#..\n.....##........\n###.###.##..##.\n\n...#.#.####.#.#\n#..#..##.###..#\n..#.##..##..##.\n##...########..\n.####..####..##\n.##............\n#...#.#.##.#.#.\n.#..#.#.##.#.#.\n.#.##..####..##\n##..####..####.\n##..####..####.\n.#.##..####..##\n.#..#.#.##.#.#.\n#...#.#.##.#.#.\n.##............\n\n#...##.\n####..#\n....##.\n..#.##.\n#.##..#\n.##....\n...#..#\n..###.#\n#..####\n#...##.\n#...##.\n\n.#.#.########\n..#..####..##\n#.#..####..##\n.#.#.########\n...##.#.####.\n.##.##...##..\n.#####.#....#\n....#.#.#..#.\n#..##..##..##\n#...####....#\n###...###..##\n#.##....####.\n#..#.#.......\n##.##..#.##.#\n##.###.......\n\n.#...##\n#..####\n.##....\n..#....\n..#.#..\n#.#.#..\n..#....\n.##....\n#..####\n.#...##\n#..#.##\n#..#...\n..#.###\n..#####\n.###...\n\n.####.##......#\n...##.##..##..#\n...##.##..##..#\n.####.##......#\n#.##.#..#.##.#.\n..#####.##.###.\n.#...#...#..#..\n#######.######.\n.#.#...########\n\n..#..#.##\n##.#####.\n.##.#..##\n...#.##..\n..#...##.\n....##..#\n####.##..\n####.##..\n....##..#\n..#...##.\n...#.##..\n\n#....#.#.#....#.#\n#....###.#....#.#\n.##.#....#.##.#..\n.###.###.#....#.#\n.##.....##....##.\n###.#.#..#.##.#..\n##...#.#.######.#\n##..##.####..####\n#.#..###..#..#..#\n.#####..#.#..#.#.\n.#.##.#..#.##.#..\n\n.##.##.##\n#..####.#\n#..####.#\n.##.##.##\n##.##.###\n.##..###.\n#..#.#...\n\n#...#..#.\n#...#..#.\n.####..#.\n..#..#..#\n...#....#\n##..###..\n#...####.\n#...####.\n##..##...\n...#....#\n..#..#..#\n.####..#.\n#...#..#.\n\n#.##.#..#.##.\n......##.....\n..#.#.##.#.#.\n###.#....#.##\n..#...##...#.\n......##.....\n###.#....#.##\n\n...#..#.....##.##\n...#........##.##\n......###........\n..##....#...#####\n##..###.######.#.\n#.....#..##.###.#\n#.#######.#...##.\n#.###..#.##.##.#.\n..##..#..##.####.\n.#.#..###...##.##\n###..##.###..##.#\n#.##.##.##..##..#\n#.##.##.##..##..#\n\n#..#....#\n#..#....#\n#....##..\n.###..#.#\n.#.##...#\n..#....##\n..#....##\n.#.##...#\n.###..#..\n\n...###...##\n##....#..#.\n###.#.#....\n#..###.##.#\n#..###.##.#\n###.#......\n##....#..#.\n...###...##\n...###...##\n##....#..#.\n###.#......\n\n..#.#.###...##...\n##.#...##.######.\n##.#...##.######.\n#.#.#.###...##...\n.#...#..##.####.#\n.###..#.####..###\n#.##.#.#.#.#..#.#\n\n#..#.#..#......\n.####.....####.\n.#.#####.......\n#.#.#####.####.\n##..#...##.##.#\n...####...####.\n.####.#########\n....#..########\n...#.##...####.\n...#.##...####.\n....#..########\n.###..#########\n...####...####.\n\n##.###.#.\n#.#..#.#.\n...#.#.##\n...#.#.##\n#.#..#.#.\n##.###.#.\n..#....#.\n#..#.####\n..###.#.#\n#####..#.\n..#.####.\n...###.#.\n...###.#.\n..#.####.\n#####..#.\n..###.#.#\n#....####\n\n##..#..#..#\n#...#....#.\n#.......##.\n#.#...##..#\n.#..#...##.\n.##########\n.#....##..#\n.##.###....\n#.###..#..#\n#.###..#..#\n.##.###....\n\n#.#.#.#.##.#.\n.##.###.##.##\n..#...#...##.\n##.#....##...\n##...###..###\n#.##....##...\n#.##....##...\n\n#.####.##..##..\n#.###..##..##..\n#.###..####.###\n.#..#.#...###..\n...##..#..##...\n##..#.#..#.#.##\n.....#.##..#..#\n.##....#.####.#\n###.##.########\n#.....#..#...##\n...##...#####.#\n##....#..##....\n##....#..##....\n...##...#####.#\n#.....#..#...##\n\n##..####..####.\n##...##...####.\n#.##.##.##.##.#\n###.####.######\n.####..####..##\n.#.#...##.#..#.\n#..........##..\n....#..#.......\n.##.#..#.##..##\n#####..########\n...#....#......\n\n###.#.#..#.\n#..##.#####\n.##.###..##\n..#.#.####.\n.#.#...##..\n##...######\n.#.....##..\n.#.....##..\n##...######\n\n..#....#.....\n##########..#\n#........#..#\n..........##.\n#.#....#.####\n#....#...####\n.#.####.#.##.\n#.##..##.####\n..........##.\n\n.#...#..#..\n#..#....#..\n#..#...##..\n##.#..#..##\n.###...####\n#.#.#...#..\n.###.#.#...\n###.#####..\n#..........\n.#....#....\n.#....#.#..\n\n#...##.#...#.##\n##...#.###..###\n#....##..#.###.\n.###..#.##.....\n##.#..##.#.#.#.\n####.#...#.#...\n.#.....#..#...#\n.#.....#..#...#\n####.#...#.#...\n##.#..##.#.#.#.\n.###..#.##....#\n#....##..#.###.\n##...#.###..###\n#...##.#...#.##\n##..#...#.#.#.#\n#...#.##.##....\n#...#.##.##....\n\n#.#..####..#.##.#\n..###....###....#\n.##.#.##.#.##..##\n...########......\n.###.####.###..##\n.###..##..###..##\n###..#..#..######\n...##.##.##......\n.#..##..##..#..#.\n##...####...####.\n..#.#.##.#.#....#\n##..........####.\n..#.######.#....#\n..#.#.####.#....#\n#.#..#..#..#.##.#\n####.#..#.#######\n.#...####...#..#.\n\n..#.##.#...#..#\n.#..##..#.#..#.\n#..####..##.##.\n.#.#..#.#.##...\n###########....\n#.#....#.#..#..\n.###..###.#...#\n##.####.###..#.\n.#..##..#...##.\n#.######.#.#..#\n##..###.####...\n#........##.#.#\n.########.#....\n.########.#....\n#........##.#.#\n\n###...##...##\n#.#.##..##.#.\n#.#.##..##.#.\n###...##...##\n#....####....\n##.##.##.##.#\n.##........##\n.#.#.#..#.#.#\n##..#....#..#\n#..##.##.##.#\n.#.###..###.#\n.##........##\n..#...##...#.\n\n#..#....#..##\n.##.#..#.##..\n...#.##.#....\n##...##...###\n.#..#..#..#..\n#..##..##..##\n.##......##..\n....####...##\n...#.##.#....\n.##..##..##..\n.###.##.###..\n#....##....##\n####....#####\n#.#.####.#.##\n###......####\n....#..#.....\n#.#.#..#.#.##\n\n##.###..#....#..#\n..###..#.###.....\n##.#####...####..\n#...#.#.###..#.##\n#...###.###..#.##\n##.#####...####..\n..###..#.###.....\n##.###..#....#..#\n#.#....##...#####\n#.#....##...#####\n##.###..#....#..#\n\n#..#..#..#..#..\n####..#########\n.##..#.#......#\n#.#..#.#.####.#\n..#...#########\n#..####..#..#..\n..#..##.##..##.\n##...##.#....#.\n##.#.##.#....#.\n\n.#.##.##.#.##..\n###.##.####..#.\n.#.#.#..####.##\n.#.#.#..####.##\n###.##.####..#.\n.#.##.##.#.##..\n...##.###.###.#\n.##....#.###.##\n#..#.#.##.#..#.\n.###.######....\n####...##.#....\n####...##.#.#..\n.###.######....\n\n..##.#.##\n##.#.#.##\n###......\n#..#.##..\n.#..##.##\n..###.#..\n#....#.##\n#..##..##\n##.#..#..\n..#.###..\n..#.##...\n##.#..#..\n#..##..##\n#....#.##\n..###.#..\n\n..#..#.##.#\n.......##..\n####.......\n.#...##..##\n#.#########\n..##.##..##\n#.###......\n\n....####.#.#.##\n.##...##...#.##\n####...###.##..\n#..###....#..#.\n#..###....#..#.\n####...###.#...\n.##...##...#.##\n\n##....#...#\n######..##.\n##.#####.#.\n.......#.#.\n..##......#\n..#........\n####.##.##.\n.....#..###\n...#####.##\n...###.#.##\n.....#..###\n\n##...#.###.\n###.####.#.\n###.#.....#\n...###.#.#.\n...#######.\n##.....###.\n##..##.####\n..####.#...\n#####..#.##\n##.....##.#\n....##..#..\n###..###.#.\n###...##.#.\n\n#...####.##.###\n.#####.#...####\n#.#.#..#.#..##.\n#.#.#..#.#..##.\n.#####.#...####\n....####.##.###\n###..###.###.#.\n..##...#.#..#.#\n#.#.#...###.###\n.###..#...##..#\n######.......#.\n#...#####..##.#\n#...#####..##.#\n######.......#.\n.###..#...##..#\n\n###.#.####.#.\n.#####.##.##.\n#.#..#.###.#.\n#..####.#...#\n#..####.#...#\n#.#..#.###.#.\n.#####.##.##.\n###.#.####.#.\n.##..#.#.#..#\n.##..#.#.#..#\n###.#.####.##\n.#####.##.##.\n#.#..#.###.#.\n\n#.####.####..#.##\n.##..##..#.##.#..\n.........######..\n.##..##.#.####.#.\n#..##..#.#....#.#\n##.##.####....###\n.#.##.#.##....##.\n..####.....##....\n#.#..#.###.##.###\n#......##########\n#......#...##...#\n\n.#..#####.#\n.#.#....#.#\n......##.##\n#.....##.##\n.#.#....#.#\n###.#......\n###.#......\n.#.#....#.#\n#.....##.##\n......##.##\n.#.#....#.#\n\n#.##..##.#...##.#\n#..#..#..##.##.##\n##......##..##..#\n#.##..##.#..#.###\n#.##..##.#..#.###\n##......##..##..#\n#..#..#..##.##.##\n#.##..##.#....#.#\n.###..###..###...\n##.####.##..###.#\n#.#....#.###.###.\n.#......#.#.##...\n##..##..##.###.#.\n\n####...##..#.\n##.#..#......\n##.#.####.###\n...........#.\n.##.##.#####.\n..###..#.#...\n..#..#.##....\n###..##....##\n..##..#.#.###\n..#..#.##.#.#\n..#..#.##.#.#\n\n##.######\n..#.#..#.\n..#..##..\n.#.#.##.#\n##...##..\n..#......\n.##......\n\n#..#.#.#.##\n....#.#..#.\n#..##.#..#.\n#..##.#.##.\n#..##..###.\n#..#..###..\n.##.##..#.#\n.##.##.##.#\n#..#..###..\n\n.#.#..#....\n.#.#..##...\n.#.##...#..\n#...#.#..##\n#...##.####\n..##....###\n#...####.##\n\n####.####.#.###\n####.####.#.###\n..#...#####.##.\n#.#.#...#..#...\n#.###.#.#..#...\n.....##.#######\n.#..###...###.#\n...###.##...#..\n...#.#.##...#..\n\n.....#..###..#.\n##...#...##.##.\n###..#..####...\n##..##....##.##\n##.#..########.\n###...#..#####.\n..##.#..#.#....\n##..####...###.\n###..#...#....#\n####.##.#..##..\n####.####..##..\n###..#...#....#\n##..####...###.\n\n.#.#.##.###.#..\n#..###.....####\n.....##.##.....\n#.#..#...##.#..\n#..####...###..\n..######.#.#...\n.##.#.#..##.#..\n.#...##.#...###\n.#...##.#...###\n.##.#.#..##.#..\n..######.#.#...\n#..####...###..\n#.##.#...##.#..\n\n##..##.\n.....##\n##..##.\n..##...\n##..##.\n.####..\n......#\n##..###\n.####.#\n#....##\n######.\n......#\n#.##.##\n#.##.#.\n#.##.#.\n\n.#.##.#.#.##.##\n##....###..##..\n#.#..#.#..####.\n.######....##..\n#.####.###.##..\n#.####.###.##..\n.######....##..\n#.#..#.#..####.\n##....###..##..\n.#.##.#.#.##.##\n........####...\n#..##..#....#.#\n#......#.##.#..\n##....###.####.\n.#.#..#..#.##..\n\n#..........#.\n.##...##...##\n#.#...##...#.\n...#.#..#.#..\n...###..###..\n.....#..#....\n..##.#..#.##.\n.#..######..#\n.#..######..#\n\n..#..###.....\n..##.###.....\n.....##.#.##.\n.####..#.##..\n.##.#..##...#\n#.#.#...#...#\n......###.##.\n.####..#####.\n#..#.##..#.##\n#..#.##..#.##\n.####..#####.\n......###.##.\n#.#.#...#...#\n\n.#.###.##\n..#.#####\n#.####.##\n#.#.#.##.\n...#..#..\n#..##..##\n##...#.##\n.#...##..\n.#..#..##\n.#..#..##\n.#...##..\n##...#.##\n#..##..##\n\n.#..####...#....#\n.......##...##.##\n.......##...##.##\n.#..####...#....#\n.#.###.###..##..#\n.##.###..........\n#####.#.#.##.###.\n.#.###.#######...\n...##..##.#.##..#\n.###.#.####.#...#\n.###.#.####.#.#.#\n\n.#..#..#..#..#.\n####....#######\n#####..########\n...#....#......\n..##.##.##....#\n#..#....#..##..\n...######......\n.###....###...#\n.#..####..#..#.\n\n..##......#.#\n###.###..#..#\n######.#.#..#\n######..##.##\n#....#..##.#.\n.####.#....#.\n..##..####..#\n##..####.##..\n##..####.##..\n\n..#.##..##.\n....#....#.\n.##..#..#..\n#..#..##..#\n.##..####..\n.##..#..#..\n#..###..###\n.##.#.##.#.\n#..##....##\n\n##.##.###\n#.####.##\n...##....\n.##..##..\n...##....\n#.####.##\n#..##..##\n##....###\n#..##..##\n...##....\n#.####.##\n##....###\n.##.###..\n#.####.##\n#..##..##\n#......##\n..#..#...\n\n.####.###..#.\n#....#...#.##\n#....###.##.#\n......#####..\n......#.###.#\n.#..#..#.##..\n..##..##.##.#\n......##.#.#.\n..#......##.#\n######...####\n.........####\n#.##.#.##.#..\n#.##.#.##.#..\n.........####\n######...####\n\n..##.###.#.\n###.###.##.\n.#.##.##...\n.#.##.##...\n###.###.##.\n..##.###.#.\n###..##...#\n...#.###.#.\n#.##.##..#.\n..#.....#..\n##.....####\n.#.###..###\n####..#..##\n####..#..##\n.#.###..##.\n\n##..#..#....#\n#.###.#.###..\n#.#..#.#...#.\n####.#..###..\n.#..##.#.#..#\n.#....#######\n..#.####.##.#\n..#.####.##.#\n.#....#######\n.#..##.#.#..#\n####.#..###..\n#.#..#.#...#.\n#.##..#.###..\n##..#..#....#\n##..#..#....#\n\n##..#.##.##\n##.##.#.#..\n#.#.#######\n.##....#.#.\n#.###..##.#\n#.###..##.#\n.##....#.#.\n#.#.#######\n##.##.#.#..\n##..#.##..#\n..#..###.#.\n#.##.#.#.##\n#.##.#.#.##\n..#..###.#.\n##..#.##..#\n\n#.#............\n...##.##..##..#\n.#..###.##.###.\n####.#.#..#.#.#\n..#.##......##.\n#..#.#......#.#\n..##.#......#.#\n.#.#....##....#\n#####........##\n#..#..##..##..#\n#..#..##..##..#\n#####........##\n.#.#....##....#\n..##.#......#.#\n#..#.#......#.#\n\n##.##.#.##.#..#\n.##.#.#.#.###.#\n....#.#......##\n....#.#......##\n.##.#.#.#.###.#\n##.##.#.##.#..#\n#..##..#....#.#\n.###.#####...#.\n.###.#####...#.\n...##..#....#.#\n##.##.#.##.#..#\n\n#.##.###.\n.##.##...\n.##.##...\n#.##.###.\n....#.###\n##..#..##\n..##.#.#.\n...#.##.#\n..#######\n..######.\n...#.##.#\n\n.#.#.####.....#\n#....#....#.#.#\n.#####.#.#..#.#\n...#..###...###\n..##...#.######\n###.#####..####\n....#....####.#\n....#....####.#\n###.#####..####\n..##...#.######\n...#..###...###\n.#####.#.#..#.#\n#....#....#.#.#\n.#.#.####.....#\n..##....#....##\n##..#..#...###.\n##..#..#...#.#.\n\n##.########\n##.########\n####.#..#.#\n.#..##.###.\n.##.######.\n#..#......#\n.#####..###\n.###......#\n.#.#.####.#\n.....####..\n.....#..#..\n##..#.##.#.\n.#...####..\n\n.....###.\n...#.##..\n.....###.\n.....###.\n...#.##..\n.....###.\n####.....\n#...###.#\n#...###.#\n####..#..\n.....###.\n\n##....###\n.#....#..\n#..##..#.\n##.##.#.#\n#.#..#.#.\n.##..##..\n#..##..#.\n.######.#\n##.##.##.\n..#..#..#\n##....###\n##....##.\n#.####.#.\n#.####.#.\n#.####.#.\n\n.##..#.##.#..\n#.###.#..#.##\n......####...\n#......##....\n.#.#.#....#..\n..#.#.####.#.\n####..####..#\n#.#..#....#..\n..#...####...\n..#...####...\n#.#..#....#..\n####..####..#\n..#.#.####.#.\n\n.##.#..#..##.##.#\n.###.#...###.##.#\n.###...#.....##..\n.###..##.....##..\n.###.#...###.##.#\n.##.#..#..##.##.#\n..####....#......\n###...##..#..##..\n#...#...####.##.#\n.####.#.###..##..\n##.#####..###..##\n\n###.#.##.....\n.##...##..###\n.##...##..###\n###.#.##.....\n.....###.##..\n##...###.#...\n#####.#......\n.##.#..##.##.\n.##.#..##.##.\n#####.#..#...\n##...###.#...\n.....###.##..\n###.#.##.....\n\n...##.##.#.\n####..##...\n.##.##..#..\n.##...#.#.#\n#..#.#...#.\n##.#.#.#...\n#.......##.\n#........#.\n##.#.#.#...\n####.##...#\n#.##.#.##..\n#.##.#.##..\n####.##...#\n##.#.#.#...\n#........#.\n#.......##.\n##.#.#.#...\n\n#.##.#.#.##.#.#.#\n.......##..##....\n########.##.#####\n.#..#.##....##.#.\n.####..##..##..##\n#######......####\n......########...\n#.##.#.#.##.###.#\n........#..#.....\n..##..#.#..#.#..#\n.####..######..##\n#.##.###....###.#\n.#..#..........#.\n..##...#.##.#...#\n......#......#...\n\n####..#..######\n#.#.#.##.##.##.\n...###.#.#.....\n...###.#.#.....\n#.#.#.#####.##.\n####..#..######\n.##.#...##.#.##\n..###.####.##..\n#...##...#..#.#\n.#.#..#.#######\n......##.###..#\n####...#.#####.\n....###.#..#...\n..####.########\n..####.########\n\n.#####.#..#.###\n..#.....##.....\n######.####.###\n##.##..####..##\n##.##..####..##\n######.####.###\n..#.....##.....\n.#####.#..#.###\n.##############\n.#..#...##...#.\n...###.#.##.###\n.##.#.#....#.#.\n#####...##...##\n\n#...#..####\n#.#.#...##.\n..##.###..#\n#.#..#.####\n##.#.#..##.\n##.#.#..##.\n#.#..######\n..##.###..#\n#.#.#...##.\n\n######.##.##.\n...##.....##.\n##....##.##..\n.######.#..#.\n#.#..#.#.##..\n.######.#.#..\n#......##.###\n###..###.....\n###..###.....\n\n#.#########\n####..##..#\n.##########\n#..###..###\n..##..##..#\n....##..##.\n...#..##..#\n\n.##.##..#\n....#.##.\n.##.#.##.\n.....####\n#..###..#\n....#.##.\n.##.#.##.\n.#...#..#\n.....#..#\n####.#..#\n.##.##..#\n#..#.....\n#..##.##.\n.##...##.\n######..#\n####.####\n.##...##.\n\n#####.##...#.\n..#......##..\n.###.#.#.##..\n####...#.##.#\n#...#....#...\n..###.#######\n#.####..###.#\n#.####..###.#\n..###.#######\n#...#....#...\n####...#.##.#\n.###.#.#.##..\n..#......##..\n#####..#...#.\n#####..#...#.\n\n..#.###.##..#\n######.#.#.#.\n######.#.#.#.\n..#.###.##..#\n#...#..###.#.\n############.\n..##.####...#\n#####.###....\n#...#####....\n##..#......#.\n##..#......#.\n#...#####....\n#####.###....\n..##.####...#\n############.\n#...#..###.##\n..#.###.##..#\n\n#.#..####\n.##.#####\n##.#.#...\n##.#.#...\n.##.#####\n#....####\n##..#.#..\n\n#####.#..\n#.#.#####\n..##.##..\n.....#.##\n..#####.#\n..#####.#\n.....#.##\n\n#..##.##.\n###.#.###\n#..####.#\n.##...#.#\n....##...\n....#.##.\n#..##..##\n....####.\n.##...#.#\n.##...#.#\n....####.\n#..##..##\n....#.##.\n\n##..####..##..##.\n.#..#..#...#..#..\n##..##...##.##.##\n##..###.#..####..\n.#..#......#..#..\n.......#.##.##.##\n.......###......#\n#######.###.##.##\n#....##.##......#\n##..###.#........\n##..###..#.####.#\n.#..#.#.#.......#\n##..#####..#..#..\n......##.########\n..##....#.######.\n\n.......#.#.#..#..\n.####.#.##.#..#..\n######.#####.#.##\n######.#####.#.##\n.####.#.##.#..#..\n.......#.#.#..#.#\n##..##..#.#..##..\n#.##.#.#..#..#.##\n.#..#.##..###...#\n\n#.#......\n...##..##\n.##.####.\n#..#....#\n#..#....#\n.##.####.\n#..##..##\n\n.#..#..\n#....##\n#....##\n.#..#..\n..##...\n..##..#\n#.##.##\n#....#.\n##..##.\n#....#.\n##...##\n\n##.###...\n..#.#...#\n####.###.\n##.#.##.#\n..#...#.#\n####..#..\n.......##\n...#.#...\n####.#...\n...#.#..#\n..#..#...\n....#.#.#\n..###..##\n..##.....\n..##.....\n..###..#.\n....#.#.#\n\n##.#.#.#.###...#.\n.##.#...#.###.#..\n###.######..#....\n###.######..#....\n.##.#...#.###.#..\n##.#.#.#.###...#.\n.##.#####.##..#..\n..##..###.#..#.##\n###..####.##.#..#\n###..####.##.#..#\n..##..###.##.#.##\n\n#....#.##\n#....#.#.\n.#..#.###\n..##..#.#\n#....##.#\n#.##.#...\n#.##.#..#\n.......#.\n##..####.\n\n##.#..#.##.....\n..........##.#.\n.#.#..#.#.##...\n###....########\n.########.###.#\n.##....##.#....\n#.#....#.#.#.##\n#.#....#.#.#.##\n.##....##......\n\n#.#.#.#..#.\n..##.......\n....##.##.#\n##...######\n#####.####.\n###..##..##\n.....######\n\n.....##......\n##..####.####\n..#..##..#...\n..#.####.#...\n#..#....#..##\n##...##...###\n.#..####..#..\n#.#......#.##\n.#.#.##.#.#..\n..##....##...\n##.##..##.###\n\n########.\n......###\n.####.##.\n.#..#.##.\n....#.###\n#######..\n......###\n##..##.##\n.#..#.#..\n.#..#.#..\n##..##.##\n\n##.#......#.##.\n###........####\n###..#..#..####\n.###..##..###.#\n.#.###..###...#\n.....####.....#\n#.###.##.###.##\n#............#.\n..###.##.###..#\n##.#.#..#.#.###\n...#..##..#....\n##.#.####.#.##.\n###.#.##.#.###.\n....######.....\n####......#####\n####......#####\n....######.....\n\n.....######..##\n######.....##..\n..###.##..####.\n.#..###.###..##\n#..###..#######\n.##..##.#.#..#.\n.##.###.#.#..#.\n\n#..#..#\n######.\n.....#.\n#..####\n.##....\n....###\n#..##.#\n#..###.\n####.#.\n.##.#.#\n#..#.#.\n....###\n.###.#.\n.##..#.\n.##..#.\n",
    "year": "2023",
    "day": "13",
    "silverSolved": false,
    "goldSolved": false
  },
  "aiSolver": {
    "aiModel": "gpt-4-1106-preview",
    "aiMaxTokens": 4096,
    "aiPrompt": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n--- Day 13: Point of Incidence ---\r\n\r\nWith your help, the hot springs team locates an appropriate spring which launches you neatly and precisely up to the edge of Lava Island.\r\n\r\n There's just one problem: you don't see any lava.\r\n\r\n You do see a lot of ash and igneous rock; there are even what look like gray mountains scattered around. After a while, you make your way to a nearby cluster of mountains only to discover that the valley between them is completely full of large mirrors. Most of the mirrors seem to be aligned in a consistent way; perhaps you should head in that direction?\r\n\r\n As you move through the valley of mirrors, you find that several of them have fallen from the large metal frames keeping them in place. The mirrors are extremely flat and shiny, and many of the fallen mirrors have lodged into the ash at strange angles. Because the terrain is all one color, it's hard to tell where it's safe to walk or where you're about to run into a mirror.\r\n\r\n You note down the patterns of ash (.) and rocks (#) that you see as you walk (your puzzle input); perhaps by carefully analyzing these patterns, you can figure out where the mirrors are!\r\n\r\n For example:\r\n\r\n #.##..##. ..#.##.#. ##......# ##......# ..#.##.#. ..##..##. #.#.##.#. #...##..# #....#..# ..##..### #####.##. #####.##. ..##..### #....#..# \r\n\r\nTo find the reflection in each pattern, you need to find a perfect reflection across either a horizontal line between two rows or across a vertical line between two columns.\r\n\r\n In the first pattern, the reflection is across a vertical line between two columns; arrows on each of the two columns point at the line between the columns:\r\n\r\n 123456789 \u003e\u003c #.##..##. ..#.##.#. ##......# ##......# ..#.##.#. ..##..##. #.#.##.#. \u003e\u003c 123456789 \r\n\r\nIn this pattern, the line of reflection is the vertical line between columns 5 and 6. Because the vertical line is not perfectly in the middle of the pattern, part of the pattern (column 1) has nowhere to reflect onto and can be ignored; every other column has a reflected column within the pattern and must match exactly: column 2 matches column 9, column 3 matches 8, 4 matches 7, and 5 matches 6.\r\n\r\n The second pattern reflects across a horizontal line instead:\r\n\r\n 1 #...##..# 1 2 #....#..# 2 3 ..##..### 3 4v#####.##.v4 5^#####.##.^5 6 ..##..### 6 7 #....#..# 7 \r\n\r\nThis pattern reflects across the horizontal line between rows 4 and 5. Row 1 would reflect with a hypothetical row 8, but since that's not in the pattern, row 1 doesn't need to match anything. The remaining rows match: row 2 matches row 7, row 3 matches row 6, and row 4 matches row 5.\r\n\r\n To summarize your pattern notes, add up the number of columns to the left of each vertical line of reflection; to that, also add 100 multiplied by the number of rows above each horizontal line of reflection. In the above example, the first pattern's vertical line has 5 columns to its left and the second pattern's horizontal line has 4 rows above it, a total of 405.\r\n\r\n Find the line of reflection in each of the patterns in your notes. What number do you get after summarizing all of your notes?\r\n\r\n To begin, 13/input.\r\n\r\n \n========\nFirst few Lines of input files are:\n...#..##.####.#\n##..##.###..###\n#.#............\n#...#...#..#.#.\n.#..###.#.##.#.\n###.###.##..##.\n.....##........\n##..#....#..#..\n#....#...#..#..\n#..##.#.#.##.#.\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiPromptTemplate": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n{AOC_TASK}\n========\nFirst few Lines of input files are:\n{AOC_INPUT}\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiResponse": "To solve the task, the following steps will be taken in the Go program:\n\n1. Read the input from the file \"input.txt\"\n2. For each pattern in the input, detect whether the line of reflection is vertical or horizontal\n3. Count the number of columns to the left of a vertical line of reflection or the number of rows above a horizontal line of reflection\n4. Summarize the notes according to the task's instructions\n5. Print the final result\n\nHere's the code in \"main.go\":\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tvar patterns [][]string\n\tcurrentPattern := []string{}\n\n\t// Read the input file and group patterns\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif line == \"\" {\n\t\t\tif len(currentPattern) \u003e 0 {\n\t\t\t\tpatterns = append(patterns, currentPattern)\n\t\t\t\tcurrentPattern = []string{}\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentPattern = append(currentPattern, line)\n\t\t}\n\t}\n\t// Add the last pattern if exists\n\tif len(currentPattern) \u003e 0 {\n\t\tpatterns = append(patterns, currentPattern)\n\t}\n\n\t// Process each pattern\n\tsum := 0\n\tfor _, pattern := range patterns {\n\t\tsum += processPattern(pattern)\n\t}\n\n\t// Print the final result\n\tfmt.Println(sum)\n}\n\n// processPattern finds a line of reflection and returns the sum according to the instructions\nfunc processPattern(pattern []string) int {\n\tverticalSum := tryVerticalReflection(pattern)\n\tif verticalSum \u003e= 0 {\n\t\treturn verticalSum\n\t}\n\thorizontalSum := tryHorizontalReflection(pattern)\n\tif horizontalSum \u003e= 0 {\n\t\treturn horizontalSum * 100\n\t}\n\n\treturn 0\n}\n\n// tryVerticalReflection tries to find a vertical line of reflection\nfunc tryVerticalReflection(pattern []string) int {\n\tn := len(pattern[0])\n\tfor i := 1; i \u003c n; i++ {\n\t\tif isVerticalReflection(pattern, i) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// isVerticalReflection checks if there is a vertical reflection at the given column index\nfunc isVerticalReflection(pattern []string, index int) bool {\n\tfor _, row := range pattern {\n\t\tleft := reverseString(row[:index])\n\t\tright := row[index:]\n\n\t\t// Mirror the longer side if uneven\n\t\tif len(left) \u003e len(right) {\n\t\t\tleft = left[:len(right)]\n\t\t} else {\n\t\t\tright = right[:len(left)]\n\t\t}\n\n\t\tif left != right {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// reverseString reverses a string\nfunc reverseString(s string) string {\n\tr := []rune(s)\n\tfor i, j := 0, len(r)-1; i \u003c j; i, j = i+1, j-1 {\n\t\tr[i], r[j] = r[j], r[i] \n\t}\n\treturn string(r)\n}\n\n// tryHorizontalReflection tries to find a horizontal line of reflection\nfunc tryHorizontalReflection(pattern []string) int {\n\tn := len(pattern)\n\tfor i := 1; i \u003c n; i++ {\n\t\tif isHorizontalReflection(pattern, i) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// isHorizontalReflection checks if there is a horizontal reflection at the given row index\nfunc isHorizontalReflection(pattern []string, index int) bool {\n\tfor i := 0; i \u003c index; i++ {\n\t\tif i \u003e= len(pattern)-index {\n\t\t\tbreak\n\t\t}\n\t\tif pattern[i] != pattern[len(pattern)-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc init() {\n\tfmt.Println(strings.Repeat(\"=\", 80))\n}\n\nfunc main() {\n\tsum := 0\n\n\t// Open input file\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\n\t// Process each pattern\n\tfor scanner.Scan() {\n\t\tpattern := []string{scanner.Text()}\n\t\tfor scanner.Scan() {\n\t\t\tline := scanner.Text()\n\t\t\tif line == \"\" {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpattern = append(pattern, line)\n\t\t}\n\t\tsum += summarizePattern(pattern)\n\t}\n\n\t// Handle possible errors while reading the file\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Print the final result\n\tfmt.Println(sum)\n}\n\n// summarizePattern analyzes a pattern to find its reflection\n// and returns the summary value for that pattern according to the rules.\nfunc summarizePattern(pattern []string) int {\n\t// Check for reflection column-wise\n\tfor col := 1; col \u003c len(pattern[0]); col++ {\n\t\tmirror := true\n\t\tfor _, row := range pattern {\n\t\t\tleft, right := row[:col], reverse(row[col:])\n\t\t\tif !strings.HasPrefix(right, left) {\n\t\t\t\tmirror = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif mirror {\n\t\t\treturn col\n\t\t}\n\t}\n\n\t// Check for reflection row-wise\n\tfor row := 1; row \u003c len(pattern); row++ {\n\t\ttop, bottom := pattern[:row], reversePattern(pattern[row:])\n\t\tif reflectPatterns(top, bottom) {\n\t\t\treturn 100 * row\n\t\t}\n\t}\n\n\treturn 0\n}\n\n// reverse a string\nfunc reverse(s string) string {\n\trns := []rune(s)\n\tfor i, j := 0, len(rns)-1; i \u003c j; i, j = i+1, j-1 {\n\t\trns[i], rns[j] = rns[j], rns[i]\n\t}\n\treturn string(rns)\n}\n\n// reversePattern reverses a slice of strings\nfunc reversePattern(pattern []string) []string {\n\treversed := make([]string, len(pattern))\n\tfor i := range pattern {\n\t\treversed[len(reversed)-1-i] = pattern[i]\n\t}\n\treturn reversed\n}\n\n// reflectPatterns checks if two patterns reflect each other.\nfunc reflectPatterns(a, b []string) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i := range a {\n\t\tif a[i] != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n```\n\nTo run this code, save it to a file named `main.go`, and make sure that `input.txt` is in the same directory with the provided input. Then compile and run the Go program with:\n\n```bash\ngo run main.go\n```\n\nThis will print out the summary number as per the puzzle's specifications. Please ensure you have Go installed and your system's environment variables configured to execute Go code.",
    "aiResponseCode": "\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tvar patterns [][]string\n\tcurrentPattern := []string{}\n\n\t// Read the input file and group patterns\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif line == \"\" {\n\t\t\tif len(currentPattern) \u003e 0 {\n\t\t\t\tpatterns = append(patterns, currentPattern)\n\t\t\t\tcurrentPattern = []string{}\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentPattern = append(currentPattern, line)\n\t\t}\n\t}\n\t// Add the last pattern if exists\n\tif len(currentPattern) \u003e 0 {\n\t\tpatterns = append(patterns, currentPattern)\n\t}\n\n\t// Process each pattern\n\tsum := 0\n\tfor _, pattern := range patterns {\n\t\tsum += processPattern(pattern)\n\t}\n\n\t// Print the final result\n\tfmt.Println(sum)\n}\n\n// processPattern finds a line of reflection and returns the sum according to the instructions\nfunc processPattern(pattern []string) int {\n\tverticalSum := tryVerticalReflection(pattern)\n\tif verticalSum \u003e= 0 {\n\t\treturn verticalSum\n\t}\n\thorizontalSum := tryHorizontalReflection(pattern)\n\tif horizontalSum \u003e= 0 {\n\t\treturn horizontalSum * 100\n\t}\n\n\treturn 0\n}\n\n// tryVerticalReflection tries to find a vertical line of reflection\nfunc tryVerticalReflection(pattern []string) int {\n\tn := len(pattern[0])\n\tfor i := 1; i \u003c n; i++ {\n\t\tif isVerticalReflection(pattern, i) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// isVerticalReflection checks if there is a vertical reflection at the given column index\nfunc isVerticalReflection(pattern []string, index int) bool {\n\tfor _, row := range pattern {\n\t\tleft := reverseString(row[:index])\n\t\tright := row[index:]\n\n\t\t// Mirror the longer side if uneven\n\t\tif len(left) \u003e len(right) {\n\t\t\tleft = left[:len(right)]\n\t\t} else {\n\t\t\tright = right[:len(left)]\n\t\t}\n\n\t\tif left != right {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// reverseString reverses a string\nfunc reverseString(s string) string {\n\tr := []rune(s)\n\tfor i, j := 0, len(r)-1; i \u003c j; i, j = i+1, j-1 {\n\t\tr[i], r[j] = r[j], r[i] \n\t}\n\treturn string(r)\n}\n\n// tryHorizontalReflection tries to find a horizontal line of reflection\nfunc tryHorizontalReflection(pattern []string) int {\n\tn := len(pattern)\n\tfor i := 1; i \u003c n; i++ {\n\t\tif isHorizontalReflection(pattern, i) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n\n// isHorizontalReflection checks if there is a horizontal reflection at the given row index\nfunc isHorizontalReflection(pattern []string, index int) bool {\n\tfor i := 0; i \u003c index; i++ {\n\t\tif i \u003e= len(pattern)-index {\n\t\t\tbreak\n\t\t}\n\t\tif pattern[i] != pattern[len(pattern)-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc init() {\n\tfmt.Println(strings.Repeat(\"=\", 80))\n}\n\nfunc main() {\n\tsum := 0\n\n\t// Open input file\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\n\t// Process each pattern\n\tfor scanner.Scan() {\n\t\tpattern := []string{scanner.Text()}\n\t\tfor scanner.Scan() {\n\t\t\tline := scanner.Text()\n\t\t\tif line == \"\" {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpattern = append(pattern, line)\n\t\t}\n\t\tsum += summarizePattern(pattern)\n\t}\n\n\t// Handle possible errors while reading the file\n\tif err := scanner.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Print the final result\n\tfmt.Println(sum)\n}\n\n// summarizePattern analyzes a pattern to find its reflection\n// and returns the summary value for that pattern according to the rules.\nfunc summarizePattern(pattern []string) int {\n\t// Check for reflection column-wise\n\tfor col := 1; col \u003c len(pattern[0]); col++ {\n\t\tmirror := true\n\t\tfor _, row := range pattern {\n\t\t\tleft, right := row[:col], reverse(row[col:])\n\t\t\tif !strings.HasPrefix(right, left) {\n\t\t\t\tmirror = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif mirror {\n\t\t\treturn col\n\t\t}\n\t}\n\n\t// Check for reflection row-wise\n\tfor row := 1; row \u003c len(pattern); row++ {\n\t\ttop, bottom := pattern[:row], reversePattern(pattern[row:])\n\t\tif reflectPatterns(top, bottom) {\n\t\t\treturn 100 * row\n\t\t}\n\t}\n\n\treturn 0\n}\n\n// reverse a string\nfunc reverse(s string) string {\n\trns := []rune(s)\n\tfor i, j := 0, len(rns)-1; i \u003c j; i, j = i+1, j-1 {\n\t\trns[i], rns[j] = rns[j], rns[i]\n\t}\n\treturn string(rns)\n}\n\n// reversePattern reverses a slice of strings\nfunc reversePattern(pattern []string) []string {\n\treversed := make([]string, len(pattern))\n\tfor i := range pattern {\n\t\treversed[len(reversed)-1-i] = pattern[i]\n\t}\n\treturn reversed\n}\n\n// reflectPatterns checks if two patterns reflect each other.\nfunc reflectPatterns(a, b []string) bool {\n\tif len(a) != len(b) {\n\t\treturn false\n\t}\n\tfor i := range a {\n\t\tif a[i] != b[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
    "aiAnswerFound": false
  },
  "aocSolve": {
    "attemptAllowSubmit": true
  }
}