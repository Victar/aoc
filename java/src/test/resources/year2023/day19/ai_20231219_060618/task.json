{
  "aocTask": {
    "text": "/\r\n/2023/about\r\n/2023/events\r\nhttps://teespring.com/stores/advent-of-code\r\n/2023/settings\r\n/2023/auth/logout\r\nllljjjiii /2023/support 28*\r\n\r\n        ///2023\r\n\r\n\r\n/2023\r\n/2023/support\r\n/2023/sponsors\r\n/2023/leaderboard\r\n/2023/stats\r\n Our /2023/sponsors help make Advent of Code possible:https://www.getgrist.com/?utm_source=aoc\u0026utm_medium=placement\u0026utm_campaign=aoc-2023 - Got #REF!? Try open source spreadsheet-database with Python formulas \r\n\r\n--- Day 19: Aplenty ---\r\n\r\nThe Elves of Gear Island are thankful for your help and send you on your way. They even have a hang glider that someone 9 from Desert Island; since you're already going that direction, it would help them a lot if you would use it to get down there and return it to them.\r\n\r\n As you reach the bottom of the relentless avalanche of machine parts, you discover that they're already forming a formidable heap. Don't worry, though - a group of Elves is already here organizing the parts, and they have a system.\r\n\r\n To start, each part is rated in each of four categories:\r\n\r\n \r\nx: Extremely cool looking \r\nm: Musical (it makes a noise when you hit it) \r\na: Aerodynamic \r\ns: Shiny \r\n \r\n\r\nThen, each part is sent through a series of workflows that will ultimately accept or reject the part. Each workflow has a name and contains a list of rules; each rule specifies a condition and where to send the part if the condition is true. The first rule that matches the part being considered is applied immediately, and the part moves on to the destination described by the rule. (The last rule in each workflow has no condition and always applies if reached.)\r\n\r\n Consider the workflow ex{x\u003e10:one,m\u003c20:two,a\u003e30:R,A}. This workflow is named ex and contains four rules. If workflow ex were considering a specific part, it would perform the following steps in order:\r\n\r\n \r\nRule \"x\u003e10:one\": If the part's x is more than 10, send the part to the workflow named one. \r\nRule \"m\u003c20:two\": Otherwise, if the part's m is less than 20, send the part to the workflow named two. \r\nRule \"a\u003e30:R\": Otherwise, if the part's a is more than 30, the part is immediately rejected (R). \r\nRule \"A\": Otherwise, because no other rules matched the part, the part is immediately accepted (A). \r\n \r\n\r\nIf a part is sent to another workflow, it immediately switches to the start of that workflow instead and never returns. If a part is accepted (sent to A) or rejected (sent to R), the part immediately stops any further processing.\r\n\r\n The system works, but it's not keeping up with the torrent of weird metal shapes. The Elves ask if you can help sort a few parts and give you the list of workflows and some part ratings (your puzzle input). For example:\r\n\r\n px{a2090:A,rfg} pv{a1716:R,A} lnx{m1548:A,A} rfg{s2440:R,A} qs{s3448:A,lnx} qkq{x2662:A,R} in{s2770:qs,m3333:R,R} hdj{m838:A,pv} {x=787,m=2655,a=1222,s=2876} {x=1679,m=44,a=2067,s=496} {x=2036,m=264,a=79,s=2244} {x=2461,m=1339,a=466,s=291} {x=2127,m=1623,a=2188,s=1013} \r\n\r\nThe workflows are listed first, followed by a blank line, then the ratings of the parts the Elves would like you to sort. All parts begin in the workflow named in. In this example, the five listed parts go through the following workflows:\r\n\r\n \r\n{x=787,m=2655,a=1222,s=2876}: in -\u003e qqz -\u003e qs -\u003e lnx -\u003e A \r\n{x=1679,m=44,a=2067,s=496}: in -\u003e px -\u003e rfg -\u003e gd -\u003e R \r\n{x=2036,m=264,a=79,s=2244}: in -\u003e qqz -\u003e hdj -\u003e pv -\u003e A \r\n{x=2461,m=1339,a=466,s=291}: in -\u003e px -\u003e qkq -\u003e crn -\u003e R \r\n{x=2127,m=1623,a=2188,s=1013}: in -\u003e px -\u003e rfg -\u003e A \r\n \r\n\r\nUltimately, three parts are accepted. Adding up the x, m, a, and s rating for each of the accepted parts gives 7540 for the part with x=787, 4623 for the part with x=2036, and 6951 for the part with x=2127. Adding all of the ratings for all of the accepted parts gives the sum total of 19114.\r\n\r\n Sort through all of the parts you've been given; what do you get if you add together all of the rating numbers for all of the parts that ultimately get accepted?\r\n\r\n To begin, 19/input.\r\n\r\n Answer: \r\n\r\n You can also [Shareon https://twitter.com/intent/tweet?text=%22Aplenty%22+%2D+Day+19+%2D+Advent+of+Code+2023\u0026url=https%3A%2F%2Fadventofcode%2Ecom%2F2023%2Fday%2F19\u0026related=ericwastl\u0026hashtags=AdventOfCode https://] this puzzle.\r\n\r\n ",
    "input": "rr{s\u003e898:A,s\u003e537:A,a\u003e2567:R,A}\ngmr{x\u003c1782:A,x\u003c1819:R,R}\ndln{m\u003c1743:R,R}\nkd{x\u003e1248:xsx,m\u003c797:cxm,ppz}\nlsv{m\u003c2789:R,A}\nld{a\u003e2638:A,x\u003c2418:tsb,sds}\nbb{x\u003c2091:gb,s\u003e2804:lxr,vz}\nrjc{s\u003c2734:R,x\u003c709:R,R}\nng{x\u003c3090:A,a\u003c3366:R,a\u003e3456:R,R}\nfdh{a\u003c2472:jbt,chz}\npg{x\u003c3179:A,x\u003e3508:R,s\u003c2653:R,A}\nckl{x\u003c1338:R,s\u003e1155:R,R}\ntt{m\u003c3331:R,x\u003c2654:R,a\u003c2193:R,A}\nvk{x\u003e1759:hzr,xgr}\npgn{s\u003e3747:A,R}\nksl{a\u003e1008:dq,s\u003e1178:vc,a\u003c669:A,A}\nfrt{s\u003c2175:R,x\u003c3670:R,R}\nhk{x\u003e767:jn,lvr}\ndnq{s\u003c1989:A,A}\nrcp{a\u003e1871:A,x\u003c879:A,s\u003e3196:A,A}\nvdc{s\u003e1410:A,x\u003c2648:R,R}\nhp{x\u003e3237:R,R}\nsps{s\u003c2626:A,A}\nfsz{a\u003e1966:R,R}\ndtd{x\u003c3224:A,x\u003c3493:njp,R}\nnzm{s\u003e1996:R,s\u003e1738:R,R}\nshm{m\u003c3138:A,m\u003e3515:A,A}\nrbl{s\u003e2903:A,A}\nrqr{a\u003c1658:cz,a\u003e2538:hr,cr}\nmfd{m\u003c2895:bkh,m\u003e3041:R,x\u003e605:R,kpt}\ncxm{x\u003c733:fqb,m\u003c305:lh,A}\nmtj{a\u003e682:A,m\u003c514:R,R}\nnqp{x\u003c1742:xmh,m\u003c2426:qg,a\u003c1664:zn,mdq}\nqbc{s\u003e1746:R,a\u003e3471:A,A}\ngcb{a\u003e3873:R,x\u003e901:A,s\u003e2526:R,A}\nddt{a\u003c1612:xxx,x\u003e874:pzr,kxp}\njln{x\u003e2909:btr,s\u003c3265:R,x\u003e2454:A,fxb}\nfv{m\u003c3341:crk,nt}\nfcc{m\u003c1595:R,a\u003e1673:R,R}\nvdl{a\u003c917:A,x\u003e3085:A,A}\nxh{x\u003e3911:A,m\u003e1584:A,a\u003c3658:R,R}\nfb{x\u003c2218:R,a\u003c3097:csq,x\u003c2966:A,R}\nrg{s\u003c228:A,A}\nvv{s\u003e2743:R,m\u003c2300:A,gtc}\nkt{s\u003c3205:A,x\u003c2474:R,R}\njd{x\u003e2598:mmz,a\u003e3196:R,a\u003c2880:A,qc}\nsm{m\u003c3026:R,s\u003c2220:A,R}\nvpk{m\u003c2927:pnv,s\u003c2002:gbg,fqr}\nprz{x\u003c2475:A,x\u003e2503:A,A}\nnn{x\u003c2989:nqs,m\u003e908:A,x\u003c3617:hp,A}\nnc{m\u003e2293:A,x\u003e2254:A,R}\nrz{m\u003c1776:A,R}\nhg{a\u003c3470:A,A}\ncmk{s\u003c1993:A,R}\nfph{m\u003c3353:qkz,s\u003e2130:lnd,s\u003c1710:dt,nfk}\nhx{m\u003e3288:R,x\u003c2240:R,a\u003c3464:A,R}\nkjk{m\u003c1183:sf,s\u003c3408:nlb,sgz}\nlzg{x\u003c2160:fcv,x\u003c2444:kc,a\u003c2312:cvn,qs}\nczj{x\u003c2114:A,x\u003e2307:R,A}\nsx{s\u003e3037:mgt,qgq}\nbpz{x\u003e1117:hkk,s\u003c2508:bvv,cgs}\nlgh{s\u003e2692:ql,s\u003e1935:R,m\u003e346:R,jpx}\nrfl{a\u003e1490:R,x\u003e3507:R,R}\nvh{x\u003e2183:bnd,a\u003c2596:R,a\u003e2867:A,A}\nrb{x\u003c2254:gtn,bdh}\nndf{x\u003c2115:lxm,hkf}\nsv{s\u003c3585:A,m\u003e1776:xrs,a\u003e2949:nl,A}\nlg{a\u003e1486:R,A}\nlv{m\u003e893:A,x\u003c1036:R,m\u003e524:A,R}\njbt{m\u003e2850:R,m\u003e2575:bpt,ghx}\nxvd{s\u003c2329:klf,s\u003e2728:A,s\u003e2480:A,qj}\ngg{a\u003e3498:R,A}\nggg{x\u003e1001:A,a\u003c2616:R,s\u003c659:A,R}\nsgz{a\u003e3756:A,R}\nzn{a\u003c950:bh,pnj}\nps{a\u003e1703:zs,a\u003e670:kl,a\u003c445:pt,lk}\njhb{s\u003c568:vsn,s\u003c1048:lz,a\u003c2079:vfv,zkv}\nbd{s\u003c628:R,x\u003e3025:A,R}\ndt{m\u003e3610:A,A}\nmx{m\u003c3109:R,A}\nql{a\u003e995:R,a\u003e973:R,A}\nprb{m\u003e2030:rsc,m\u003e1898:A,s\u003c2334:dnq,A}\npxv{s\u003c870:php,m\u003c1064:lx,zf}\nqhf{m\u003c1946:A,R}\nfq{a\u003c3277:R,a\u003e3518:R,s\u003c1199:A,R}\nmvc{x\u003c2140:R,x\u003e2193:A,a\u003e1442:R,R}\nqn{m\u003c3781:mmd,jgc}\nkfz{x\u003c2837:A,m\u003e321:R,R}\nkgb{s\u003c696:A,R}\nlq{m\u003e541:R,x\u003e1193:A,x\u003e903:A,R}\njj{s\u003c479:mjb,jzr}\nzt{s\u003e3076:jln,qz}\ncsq{m\u003e578:R,R}\njm{s\u003c3473:R,A}\nqkm{x\u003c3127:R,x\u003e3236:R,A}\nsf{s\u003c3412:kcg,szg}\nzcd{a\u003c1421:qzl,sv}\ngpk{x\u003e2366:R,R}\nsj{x\u003e3520:A,m\u003c2544:R,R}\npvd{x\u003e1715:A,a\u003c2497:A,x\u003c1089:R,R}\npr{s\u003c1859:R,a\u003e3529:A,a\u003c3397:R,R}\ndjb{m\u003c1114:sh,qrb}\nczq{s\u003e516:R,x\u003c2218:R,s\u003c218:A,A}\nvb{s\u003c1894:R,a\u003c184:A,R}\nvqj{a\u003c2270:vht,R}\nkvq{a\u003e3727:A,a\u003e3597:hqb,m\u003e1854:A,R}\nkpt{a\u003e688:A,m\u003e2946:R,s\u003c2011:A,A}\ntsb{a\u003e2200:A,m\u003e3082:A,m\u003e2940:R,R}\nvsl{a\u003e1614:A,a\u003e768:R,a\u003c375:A,R}\nlxm{m\u003e2209:A,x\u003c1948:R,kpl}\nzbj{a\u003e787:A,a\u003c502:R,R}\npt{m\u003c2952:nd,s\u003c361:qk,rf}\nvqc{a\u003e3208:gh,a\u003c2817:fxj,hph}\nlx{a\u003c1928:kx,nn}\nfp{x\u003c2488:A,a\u003e2594:A,a\u003e2565:sd,lqr}\npl{s\u003c2435:R,x\u003e3489:R,a\u003e2005:A,R}\nkm{s\u003e2297:gg,s\u003e1995:kr,jmj}\nmjb{x\u003c3145:R,x\u003c3583:R,R}\ngbf{m\u003e2386:hsv,a\u003c2812:sgd,s\u003e3107:fkm,xrg}\nhkf{x\u003c2196:A,m\u003e2222:nc,tfj}\nhps{m\u003c591:rh,x\u003e2182:kjk,tl}\nxt{s\u003e3069:tml,x\u003e1527:djf,kb}\ntts{m\u003c1713:fcc,a\u003e1665:rz,rjc}\nkcg{a\u003c3603:A,R}\nxms{a\u003c2083:R,s\u003e1109:A,A}\nqj{m\u003c1531:A,a\u003e3029:A,R}\nhqf{s\u003e3712:R,A}\nzdp{a\u003c631:A,m\u003c2934:R,R}\nphs{s\u003e2172:R,m\u003c2954:A,s\u003e1925:R,A}\nsds{x\u003c2514:A,x\u003c2551:A,A}\nlm{x\u003e2416:A,s\u003c2513:R,a\u003c1459:A,R}\nbkh{s\u003c2508:R,s\u003e2810:R,A}\ntlz{a\u003c935:pb,A}\nmh{x\u003c1362:R,s\u003e1153:R,x\u003e2831:A,R}\nbvq{m\u003c2140:srz,fjj}\nlxf{s\u003c1017:A,x\u003e2469:R,A}\nhm{m\u003c1965:R,s\u003e573:A,s\u003e193:R,A}\nlvr{x\u003e427:R,A}\nrtv{x\u003e3401:R,m\u003c2251:R,s\u003e2426:R,A}\nhqb{s\u003e2435:R,x\u003e720:R,s\u003c1864:A,R}\nqd{a\u003e2748:ts,s\u003e920:xk,jj}\ndvr{x\u003e3050:R,A}\nvht{m\u003c689:A,s\u003c2425:R,s\u003c2806:A,A}\nzm{x\u003e3152:zhj,fqq}\nsh{m\u003e993:R,A}\nmk{m\u003c2712:xb,x\u003e2142:gpk,m\u003c2743:zr,psh}\nchs{x\u003c3929:R,s\u003e1942:R,m\u003c2796:ffh,mx}\nkhd{x\u003c3748:R,A}\npmr{x\u003e2509:A,A}\nzcq{s\u003c2618:R,A}\nrs{a\u003c595:R,a\u003e852:A,m\u003e3564:A,A}\ndxt{m\u003e1128:A,lzj}\nlng{a\u003c2870:df,A}\nkpl{s\u003c2493:R,a\u003c1131:R,A}\nfgg{m\u003e2455:R,m\u003e2339:fz,x\u003c921:A,R}\nsqz{m\u003c2787:R,x\u003e3528:R,R}\nqb{a\u003e1416:A,x\u003c3393:A,A}\nbnd{m\u003e2536:A,a\u003c2513:A,A}\ntjk{x\u003c2066:R,a\u003c369:A,a\u003e606:R,A}\nmmd{x\u003c2980:dm,a\u003c3007:zvt,ls}\ncvp{x\u003c3229:R,A}\nzb{a\u003e2688:A,x\u003e2968:A,m\u003e700:A,R}\nnlh{s\u003e1869:A,m\u003e2299:R,A}\nkx{s\u003c1117:brj,s\u003e1248:zz,x\u003c3062:fnb,lsf}\nxq{a\u003c1263:A,x\u003e1846:A,x\u003c720:R,A}\nmmz{a\u003c3150:A,s\u003e2097:A,a\u003e3567:R,R}\njxh{a\u003c1249:R,R}\nfqb{a\u003e2654:A,A}\nsd{s\u003c1805:R,x\u003c3073:A,a\u003c2580:A,R}\nfmt{m\u003c2299:R,s\u003e3647:A,A}\njn{a\u003e3654:R,a\u003c3493:A,x\u003c1507:A,A}\nth{m\u003c2025:hm,a\u003e1062:R,R}\nlz{s\u003e782:bf,R}\npvt{m\u003c1601:A,x\u003c3907:A,A}\nmg{x\u003c723:R,m\u003c1201:A,s\u003c634:A,A}\nlh{s\u003e3524:A,x\u003c967:A,a\u003c2778:A,R}\ncjm{a\u003c3316:R,x\u003c2600:xxp,m\u003c2257:A,R}\nszg{x\u003c2812:R,x\u003e3229:R,A}\nlsf{m\u003c962:A,x\u003e3551:R,R}\ncn{x\u003c1332:R,a\u003c3320:R,x\u003c1904:R,A}\nnnr{x\u003c2403:R,s\u003c1216:A,m\u003e1777:A,A}\nppz{s\u003e3407:jv,R}\nlb{s\u003e3415:A,s\u003c3183:A,R}\npnj{s\u003e2768:fv,a\u003e1283:fph,qps}\nfcv{x\u003c1943:pv,a\u003c2408:A,hhv}\nbf{s\u003e924:R,s\u003e855:R,A}\ndmz{a\u003c661:R,A}\nlk{a\u003c528:R,s\u003e385:R,a\u003c587:A,zdp}\npj{a\u003c3750:R,s\u003c626:A,A}\nxm{m\u003e1846:A,a\u003c1390:A,R}\ntfj{x\u003c2270:A,R}\nnp{m\u003e2347:R,x\u003c2638:A,s\u003c3079:A,A}\npv{s\u003e2196:A,m\u003e2764:A,s\u003e1919:R,A}\ncz{x\u003e1399:qtt,s\u003e865:ksl,frk}\nfl{x\u003e2916:R,m\u003c1121:R,R}\nkmf{m\u003e317:R,A}\nss{x\u003c1134:mfd,zjv}\nklf{s\u003e1901:R,R}\nck{m\u003e591:cx,mb}\nnzj{a\u003c1820:csd,a\u003c2110:pl,A}\ntml{s\u003c3444:kbk,x\u003e2333:xl,pgn}\npd{a\u003c2025:R,x\u003c2085:R,x\u003e2165:R,A}\nbdh{a\u003c1985:dp,a\u003e3257:dln,dh}\nkcn{m\u003e3720:nm,s\u003e407:gl,R}\nds{s\u003e804:kj,kcn}\ndkk{x\u003e3424:mpl,x\u003c2914:A,R}\nnjp{a\u003c1942:R,s\u003c1774:A,m\u003c1577:A,A}\nqq{a\u003c435:shm,x\u003c3562:R,m\u003c3020:jf,A}\ntl{a\u003c3669:rdm,qf}\nlvp{m\u003c1360:R,A}\ngrg{s\u003c3251:A,m\u003e3391:rq,s\u003e3321:R,R}\nqtd{m\u003c2016:cjk,bv}\nnhp{x\u003e3803:fj,a\u003e2417:R,x\u003e3717:A,A}\nbk{x\u003e2355:A,A}\nzj{a\u003e3455:A,s\u003e2113:A,A}\nkxz{x\u003e2356:qcj,x\u003e2284:R,a\u003c395:vb,R}\nhc{a\u003c960:czq,s\u003e822:R,m\u003c2057:R,dks}\nfkm{x\u003e935:lmt,ksg}\nrn{a\u003c1457:R,x\u003e2594:A,R}\nhkk{m\u003e3533:A,R}\nqk{x\u003c1619:A,A}\nxl{x\u003c3394:mvg,s\u003c3791:gbp,db}\nsrq{s\u003e1922:ttc,s\u003c1675:pm,s\u003e1833:R,R}\nlmt{a\u003e3368:lth,px}\nfzq{m\u003e516:szn,x\u003e2314:dlf,m\u003e240:gx,R}\njgc{m\u003e3858:gt,s\u003c2009:fxg,zm}\nsxj{s\u003c1686:R,R}\nbv{x\u003e746:A,R}\ngdf{x\u003c2202:A,m\u003e2735:R,x\u003c2226:R,R}\nxn{s\u003c2594:A,pg}\nlns{m\u003e209:A,x\u003e1172:A,x\u003e653:A,R}\nxpm{m\u003e970:R,R}\ndlf{a\u003c3819:A,s\u003c2152:R,x\u003e3103:R,A}\nxlm{s\u003e3506:R,s\u003c3114:A,x\u003c237:R,dd}\nltl{m\u003c3266:R,x\u003e2923:R,R}\nfxg{x\u003c3039:R,R}\nkvd{a\u003c2015:A,a\u003c2203:A,A}\nxk{a\u003e2472:A,A}\ndr{m\u003e3536:A,R}\nlxr{a\u003e314:R,s\u003c3374:zvm,hqf}\njs{m\u003c2209:brg,mcs}\nml{m\u003e1632:R,s\u003c2988:hvt,a\u003e2498:R,gm}\ncp{s\u003e719:fq,A}\nmgt{m\u003c3413:A,a\u003e532:R,a\u003c286:R,R}\nvcf{m\u003c727:R,x\u003c3292:R,s\u003c2732:R,A}\nbtr{x\u003e3446:R,x\u003e3238:R,a\u003e3185:R,A}\nhn{x\u003e1913:tjk,m\u003c3321:A,R}\nzl{s\u003c2584:R,vdl}\ndp{a\u003e968:lm,m\u003e1728:xnm,R}\nvmx{x\u003c3249:R,x\u003e3273:A,m\u003e2220:A,rvk}\nmzz{a\u003e2648:cp,x\u003c1344:th,x\u003c2953:hc,xj}\nvr{a\u003c1115:A,R}\nvf{m\u003c826:R,gcb}\nqzc{x\u003c2839:A,s\u003e3582:A,x\u003e3469:R,A}\nnx{s\u003c2192:A,x\u003e499:R,s\u003e2202:R,A}\nfjj{m\u003c2326:A,m\u003c2504:A,a\u003e1056:A,dqz}\nmpl{m\u003c1525:A,s\u003c2419:A,a\u003c1827:R,A}\nlcl{a\u003c705:A,x\u003c1817:A,A}\njpx{s\u003c1668:R,s\u003c1827:R,R}\nxsx{x\u003e1669:R,A}\nrjq{s\u003e3727:R,m\u003e3423:pmr,a\u003e568:R,A}\nghx{m\u003e2501:A,s\u003e2929:R,s\u003e2720:A,R}\ngb{a\u003e279:R,s\u003c3000:R,A}\njt{a\u003c878:kq,m\u003c2314:jxh,lg}\nfqk{s\u003c1110:lxf,s\u003e1180:vsl,R}\ngxx{a\u003e2598:R,x\u003c3064:A,m\u003c3929:A,A}\nkcp{m\u003e1060:ppk,s\u003c404:R,R}\npsh{x\u003c1950:A,x\u003c2028:R,A}\nrm{x\u003c341:jt,x\u003c501:vv,s\u003c2942:lgf,fmt}\nxch{s\u003c2107:A,R}\ntmv{a\u003e2923:xg,s\u003c2964:gs,x\u003c2196:kd,hnn}\nkxp{x\u003c293:A,R}\nvsn{s\u003e326:A,x\u003e2098:qrr,R}\nqms{a\u003e1941:A,m\u003c2303:A,A}\nzh{s\u003c2793:R,R}\nfsd{m\u003e1626:pld,zq}\nbsx{x\u003c2013:A,x\u003c2171:A,A}\nbm{a\u003c3244:A,x\u003c346:A,s\u003c3829:R,R}\nct{s\u003e3112:qdp,a\u003e3271:A,R}\njp{a\u003c1671:qjv,m\u003c664:smj,R}\nddd{a\u003e620:A,A}\nbcc{x\u003c1209:A,x\u003e1887:pd,m\u003e954:kvd,nr}\nppk{a\u003e1976:A,s\u003c567:R,R}\nhq{a\u003c3395:ltl,a\u003c3598:phj,R}\nnl{s\u003e3806:R,a\u003e3467:A,a\u003c3193:R,R}\nhr{s\u003e608:qtz,rg}\nngm{m\u003e464:ck,a\u003c2048:gn,x\u003c1680:vqc,qd}\nsfc{a\u003c2871:R,x\u003c3171:R,A}\ndrh{a\u003c932:rgr,a\u003e1062:zcq,lgh}\nxb{m\u003c2690:A,m\u003e2699:A,s\u003c2160:R,A}\nzq{s\u003c2147:R,m\u003e1598:A,R}\nhf{s\u003e2241:R,R}\npld{a\u003e3224:A,x\u003e3679:A,s\u003c2225:R,R}\nrp{x\u003e2208:gr,m\u003c2385:A,x\u003c2025:R,A}\ntp{m\u003e642:cb,a\u003c496:bb,drh}\ndk{m\u003c793:ngm,x\u003c2235:rqr,pxv}\nkq{x\u003e142:R,a\u003e320:R,m\u003e2119:R,R}\nbrj{x\u003c3156:A,s\u003c1001:A,x\u003c3516:R,A}\nhzr{m\u003e800:cj,m\u003c350:bnp,dz}\ndvq{a\u003c2817:rfk,s\u003c3640:hsr,s\u003e3834:hq,nbh}\nzvt{a\u003c2194:qr,m\u003e3582:A,R}\nhbc{m\u003e3311:A,s\u003c3819:R,A}\nxrg{a\u003e3374:kvq,qtd}\nldt{a\u003c452:A,a\u003e935:A,R}\ntv{a\u003e2686:R,R}\nfnb{x\u003c2659:R,m\u003c950:A,A}\nbvv{s\u003e2099:rs,x\u003c646:A,dmz}\nksg{s\u003c3593:R,s\u003c3769:A,s\u003c3882:bm,A}\nxc{a\u003e3887:gfs,a\u003e3825:A,ghr}\nrsd{x\u003c3011:R,x\u003c3633:A,A}\nnz{x\u003c2602:A,R}\nskv{s\u003e2643:sk,m\u003c2211:jd,m\u003e2315:rp,cjm}\ngq{x\u003c213:A,a\u003c3282:R,x\u003c293:R,R}\nkc{s\u003e2101:R,x\u003c2259:gdf,A}\nrfk{a\u003e2407:lfs,a\u003e2066:A,x\u003e2992:tnc,R}\nzdm{x\u003c2998:R,A}\nkj{m\u003e3825:A,s\u003c1051:A,A}\nmb{x\u003c1966:A,a\u003e1499:lt,m\u003c543:nmd,vt}\nqzl{a\u003c793:jqf,m\u003e1686:cpg,R}\nnfk{s\u003e1960:cvp,R}\nrlh{m\u003e2779:hpm,mk}\ncvn{s\u003e1938:dpv,x\u003e2495:R,A}\nlqr{m\u003c633:A,m\u003c963:R,A}\ngtc{s\u003c2207:R,A}\npb{a\u003e441:R,A}\ngbp{a\u003e1802:R,m\u003e560:A,A}\nbrg{m\u003c2150:rn,a\u003c1739:ddd,nz}\nlsb{a\u003e2810:R,a\u003c2751:lr,s\u003e1951:R,nvv}\nqcj{a\u003e398:R,s\u003e1884:A,A}\njhn{s\u003e624:A,a\u003e2215:R,A}\nmhd{s\u003e2442:lv,m\u003c919:lq,m\u003c1293:R,nmf}\nxrs{a\u003c2872:A,s\u003e3844:R,a\u003c3570:R,R}\nxxx{x\u003c724:dr,m\u003e3415:A,m\u003c3044:R,A}\ntb{s\u003e569:A,s\u003e199:A,s\u003c116:R,R}\nzhj{s\u003e2372:A,x\u003e3453:A,x\u003e3285:A,A}\ngl{x\u003c2441:R,R}\ngfs{s\u003e1715:A,s\u003c1599:A,A}\nzkv{m\u003c1595:R,a\u003e3150:nnr,s\u003c1240:mh,pvd}\nchn{x\u003e3256:A,x\u003c3078:R,A}\ncpz{x\u003e2062:mvc,x\u003c1856:gmr,s\u003e3599:rgb,czs}\nghr{a\u003c3760:R,A}\ngn{x\u003e1698:dhv,kgb}\nkr{x\u003c1124:A,m\u003e1069:A,s\u003c2187:A,R}\nsgd{a\u003c2278:mgb,m\u003c1822:ml,prb}\ndh{m\u003e1731:A,R}\ndkg{a\u003e2779:A,a\u003c2711:zb,R}\nls{x\u003c3343:qkm,s\u003c2028:A,jq}\nmm{a\u003c846:R,a\u003c1339:xgt,a\u003c1472:xm,rl}\nlzr{s\u003e2689:A,s\u003c2630:A,x\u003c2720:R,R}\ngh{a\u003e3561:pj,vtl}\nnt{x\u003e2734:R,a\u003e1190:A,s\u003e3248:A,A}\nvs{x\u003c447:R,R}\nin{s\u003c1496:qfr,m\u003c1482:tj,nqp}\nzs{m\u003c3096:A,a\u003c2616:tt,hx}\ncdf{a\u003c3463:R,s\u003c2048:A,m\u003e1382:R,R}\ndd{a\u003c3213:R,x\u003e308:R,m\u003c2995:R,A}\npks{a\u003e1889:A,A}\nqjv{m\u003c982:R,R}\nsrz{s\u003e2452:jm,s\u003e1986:zp,x\u003c1249:sxj,A}\nxgr{m\u003e642:km,xxn}\nbh{s\u003e2773:gsg,vsg}\nxj{x\u003c3493:chn,R}\ntj{a\u003e2506:tm,sl}\njf{s\u003c3734:A,a\u003c661:A,s\u003c3836:R,R}\nkhx{m\u003e2843:tmp,m\u003c2675:mz,a\u003e3041:rlh,lzg}\nsk{x\u003c2346:R,x\u003c2697:A,x\u003e2851:A,fjq}\nvpq{a\u003c663:A,s\u003e2293:R,a\u003e950:A,A}\nxgt{a\u003c1048:A,A}\ntnc{a\u003e1862:A,s\u003c3634:R,m\u003c3035:R,R}\nln{m\u003e2932:bzj,s\u003e1151:A,R}\nlff{a\u003c1901:A,x\u003c2187:R,R}\nnbh{s\u003c3743:mdb,s\u003c3790:ffc,hbc}\nrhg{a\u003e1320:R,A}\nvz{a\u003c183:lvq,cmk}\nfz{x\u003e790:R,m\u003c2400:R,R}\nvt{a\u003e598:A,x\u003e3231:R,a\u003e341:R,R}\nqps{m\u003e3221:hpr,s\u003c2321:srq,xn}\nmcs{a\u003c1515:np,s\u003e2811:A,fsz}\ndks{m\u003e2130:R,a\u003c1599:A,R}\nhsv{x\u003e985:ct,x\u003e359:dn,s\u003c2526:lng,xlm}\nlvq{m\u003c239:A,A}\ndv{a\u003c410:A,s\u003e2028:R,R}\nfg{x\u003c1959:A,A}\njv{m\u003c1064:A,a\u003c2658:R,x\u003c805:A,A}\nkl{m\u003e3040:sfh,a\u003c1130:R,a\u003c1421:xq,A}\nmgb{s\u003e2339:tnz,m\u003e1888:R,x\u003c962:A,jg}\ncjk{s\u003e2328:A,s\u003c1781:A,R}\nfxb{s\u003e3309:A,R}\nphp{s\u003c442:dxt,bd}\nqg{m\u003e2070:hb,x\u003e2549:cns,rb}\ndm{a\u003e2594:zj,x\u003c2401:R,A}\npxr{m\u003c1112:qnh,vpq}\nhsr{x\u003c2752:R,nh}\ntqz{s\u003e2208:vf,s\u003c1834:xc,njr}\nlth{x\u003c1440:R,A}\nnmd{a\u003c519:R,A}\ngz{x\u003e3410:R,x\u003c3234:R,m\u003c1288:R,xms}\nqcz{a\u003c129:R,m\u003c3340:R,a\u003c262:A,R}\nrq{s\u003c3311:R,A}\ntgj{s\u003e3014:rlb,a\u003e1111:ddt,m\u003c3242:ss,bpz}\nvbg{x\u003e3262:R,m\u003e3573:R,m\u003e3497:A,R}\nmvg{a\u003e1759:R,a\u003e1407:R,A}\nqrb{m\u003e1334:A,A}\nfqj{s\u003c2511:A,s\u003c2628:A,x\u003c2454:A,R}\njmj{s\u003e1807:R,R}\nfrk{s\u003c428:A,mg}\npnv{a\u003e3010:R,vqn}\nvd{x\u003c1353:tqz,vhs}\ncgs{m\u003c3529:R,a\u003c683:R,A}\ndqz{m\u003c2565:A,R}\nbnp{s\u003c2087:R,R}\nlrb{m\u003c1290:vdc,rd}\nfqq{m\u003e3817:R,A}\nvhs{m\u003e830:djb,fzq}\njz{x\u003c3495:rmt,x\u003e3782:bz,m\u003c1563:xvd,fsd}\nzsr{x\u003e2541:A,a\u003e2559:R,s\u003c3324:A,A}\nqz{m\u003e3837:vcq,s\u003e2754:R,A}\nkrk{s\u003e3368:dvq,m\u003c3290:fdh,m\u003c3627:tlc,zt}\nkb{x\u003e523:mhd,gnz}\nphj{m\u003e3335:R,x\u003e2520:A,A}\npzr{a\u003c1772:hf,R}\ngm{x\u003c594:A,A}\nzp{x\u003e1210:A,m\u003e1969:R,x\u003c1048:A,R}\nts{x\u003e2800:tb,A}\ntm{a\u003c3317:tmv,s\u003e2777:hps,a\u003c3704:vk,vd}\nvqt{a\u003e1817:ln,lcl}\ncns{s\u003e2940:zcd,m\u003e1705:ttp,a\u003e2419:jz,vm}\ncx{x\u003e1442:dg,A}\nblp{m\u003e2932:nzm,A}\nlnd{x\u003c2860:fqj,s\u003e2378:vbg,rfl}\ncjv{m\u003e1230:R,m\u003c1160:R,x\u003e1829:R,A}\nvcq{s\u003e2890:A,a\u003c3193:R,R}\nlt{m\u003e548:A,A}\nnq{m\u003c1869:ltb,x\u003e754:bvq,rm}\ndpv{s\u003e2266:R,s\u003e2088:A,R}\npq{s\u003e1896:A,a\u003e508:A,R}\ndn{s\u003c2714:R,A}\nrmt{a\u003c3310:R,m\u003c1579:qvx,a\u003e3685:R,R}\nfj{x\u003c3905:A,R}\nhb{x\u003e3135:ncf,a\u003e2657:skv,x\u003e2312:js,ndf}\nzjv{x\u003c1393:dv,phs}\nzrc{m\u003e2599:kh,mf}\nhmd{x\u003e2391:R,x\u003c2249:A,a\u003c359:qcz,R}\nqf{m\u003c1072:R,R}\nltb{a\u003e1271:tts,sps}\nvfv{s\u003c1311:rhg,s\u003c1382:R,R}\nvm{a\u003c1357:sc,s\u003c2086:dtd,m\u003e1566:nzj,dkk}\nnlb{s\u003e3125:lvp,rbl}\nqkz{a\u003e1431:lsv,a\u003c1354:drt,m\u003c2748:A,R}\nfx{m\u003e278:R,R}\nfxt{m\u003c158:A,s\u003e2504:A,s\u003e2278:A,A}\nttc{m\u003e2738:A,x\u003e2531:R,R}\nxg{s\u003e2648:cpj,fb}\ncpg{s\u003e3571:A,A}\nvbf{x\u003c2621:R,A}\nsmj{x\u003e2619:R,s\u003c2380:A,m\u003c229:R,A}\nrd{x\u003e2635:R,R}\nft{a\u003e2590:R,x\u003c1805:A,R}\nnvv{m\u003c769:R,a\u003c2775:A,x\u003e1901:R,R}\nzvm{m\u003c425:A,s\u003c3125:A,A}\njzr{a\u003e2495:R,m\u003c230:A,m\u003e358:R,R}\nqrr{x\u003e3109:A,A}\npm{x\u003e2979:R,R}\nhpm{s\u003c2127:qbc,m\u003e2821:A,A}\ntbj{x\u003c2306:R,vcf}\nklg{x\u003c2349:fgg,m\u003e2394:rr,mq}\ntmh{x\u003e1022:R,a\u003c3888:R,R}\nvqn{s\u003c2159:R,R}\nhhv{x\u003c2021:R,s\u003c1880:R,A}\nsl{a\u003c1190:tp,xt}\ntnz{x\u003c637:A,m\u003c1928:R,A}\ngtk{x\u003c3823:qnc,a\u003c3156:chs,blp}\nqr{s\u003e2187:R,R}\nlr{x\u003e2636:R,a\u003e2729:R,s\u003c2032:R,R}\ngs{s\u003e2370:tbj,a\u003e2691:lsb,s\u003c2037:fp,ft}\ncpj{m\u003e531:mr,x\u003e1562:A,fx}\nrl{m\u003e1941:A,x\u003c3272:A,A}\ncb{x\u003e1857:ldt,s\u003e2780:jxb,pxr}\nffh{a\u003c2544:A,s\u003c1696:R,A}\nmq{m\u003e2314:tc,R}\nbz{a\u003c3452:pvt,xh}\ndjf{a\u003e1857:vqj,a\u003e1478:jp,s\u003e2415:qll,mpj}\nxql{s\u003e3276:R,x\u003e2910:R,R}\nqnh{x\u003c1118:A,m\u003e843:A,A}\nxnm{m\u003c1895:A,s\u003e2744:R,a\u003c429:R,R}\ndb{s\u003c3888:A,m\u003e601:R,A}\ntlc{s\u003c3095:cs,m\u003c3502:grg,tsj}\ngtn{s\u003c2926:fg,m\u003c1735:lmg,cpz}\nrdm{s\u003c3565:hg,a\u003c3476:R,A}\njxb{x\u003e920:hvd,m\u003c1098:R,R}\nqvx{m\u003c1542:R,s\u003c2014:R,A}\nrsc{s\u003c2569:A,x\u003e1132:R,m\u003c2161:A,R}\nhpr{s\u003c2269:A,x\u003e2982:A,m\u003e3565:A,vr}\nrk{s\u003e2288:R,A}\ngsg{s\u003c3382:sx,x\u003e3097:qq,rjq}\nlgf{s\u003e2430:A,nlh}\ndrt{x\u003e2910:A,R}\nqnc{x\u003e3593:qcm,m\u003e2860:R,m\u003e2715:sqz,sj}\ndg{s\u003c957:R,A}\nszn{m\u003c655:R,s\u003e2167:R,A}\nmdq{s\u003e2571:krk,m\u003e3381:qn,x\u003c2597:khx,fk}\ngr{a\u003e3183:R,R}\nczs{s\u003c3213:A,A}\nnh{m\u003e3197:A,A}\nxs{a\u003e2602:A,s\u003e3647:A,x\u003e3027:R,zsr}\nrlb{m\u003e3367:lb,tlz}\nmr{x\u003c1877:R,s\u003c3159:R,A}\nqtz{m\u003e1148:A,x\u003e796:cn,x\u003c350:gq,R}\njqf{s\u003c3537:R,m\u003c1818:R,m\u003c1976:A,A}\njq{a\u003e3381:R,A}\nbpt{x\u003e2985:A,R}\nxmh{a\u003e1944:gbf,m\u003c2610:nq,tgj}\ncs{x\u003c3029:R,x\u003c3443:R,x\u003e3665:zh,dnz}\nhvd{a\u003e606:R,m\u003c949:A,m\u003e1293:A,R}\nnjr{x\u003e841:tmh,s\u003c2080:vs,s\u003e2160:nx,tmd}\nhvt{s\u003c2301:R,A}\nqgq{s\u003e2891:R,R}\nzr{m\u003e2727:R,a\u003e3625:A,a\u003c3304:R,A}\nncf{x\u003e3563:nhp,x\u003e3308:xhk,vmx}\nhnn{a\u003c2656:xs,dkg}\nqc{x\u003c2060:A,s\u003e2092:R,R}\nrf{m\u003e3287:A,A}\nvsg{x\u003e2667:nsp,x\u003c2143:hn,s\u003e2296:hmd,kxz}\nbzh{a\u003e2579:A,R}\ntmd{x\u003c388:A,s\u003c2111:R,R}\nzf{x\u003e2922:gz,s\u003c1243:fqk,lrb}\ndq{x\u003c595:A,R}\nfxj{a\u003e2401:ggg,jhn}\nqll{s\u003c2846:glt,s\u003e2969:bk,R}\nbx{m\u003e3107:A,m\u003c2664:R,s\u003c2211:A,A}\nqtt{m\u003e1113:cjv,A}\nmpj{a\u003e1377:R,m\u003c514:kmf,R}\nmz{a\u003e3073:czj,a\u003e2229:vh,lff}\nsfh{x\u003c1574:A,s\u003c319:A,R}\nfcz{m\u003c1841:A,a\u003c1372:R,m\u003c1889:R,R}\nttp{a\u003e1724:qhf,s\u003c2454:md,s\u003e2659:mm,zl}\nvc{a\u003c458:R,m\u003e1073:R,m\u003e916:A,R}\ngnz{x\u003e273:xpm,pks}\nnqs{m\u003c968:R,a\u003c2977:R,A}\nfk{x\u003e3474:gtk,vpk}\nvtl{s\u003c935:A,x\u003e669:R,m\u003c289:R,A}\nlmg{s\u003c3290:bsx,R}\npx{m\u003c2033:A,A}\nll{x\u003e918:R,A}\nchz{s\u003e2904:A,lzr}\ndnz{x\u003e3587:R,x\u003c3525:R,R}\ndhv{m\u003e237:kfz,m\u003c129:R,A}\nqcm{x\u003c3703:A,m\u003c3001:A,A}\nzhv{a\u003e1975:R,m\u003e3165:R,x\u003c3102:A,R}\nffc{a\u003c3463:A,A}\nnd{x\u003c1799:A,a\u003c282:A,R}\nkh{m\u003e3492:ds,s\u003e745:vqt,ps}\nnsp{x\u003c3541:dvr,a\u003e347:bx,x\u003e3714:xch,sm}\nmpf{s\u003e1573:R,m\u003c3914:R,R}\njg{x\u003e1236:A,R}\ncr{s\u003c913:kcp,m\u003e1073:ckl,bcc}\ntc{a\u003e2626:A,a\u003e1730:A,a\u003c807:R,R}\nqs{x\u003c2526:prz,a\u003c2677:A,A}\nnr{s\u003e1250:R,m\u003e861:A,R}\nnmf{m\u003e1404:R,R}\ndz{m\u003c506:vbf,x\u003c3002:R,m\u003c699:A,A}\nrh{x\u003e2099:qzc,hk}\nhph{a\u003e3015:R,ll}\nbzj{m\u003c3249:R,m\u003e3352:A,s\u003e1192:R,R}\nsc{m\u003e1588:rk,x\u003c3464:zbj,m\u003c1543:khd,frt}\ncsd{a\u003e1549:A,s\u003e2395:R,s\u003e2241:R,A}\ngbg{m\u003c3100:A,a\u003c3189:A,a\u003e3566:zdm,ng}\nxxp{s\u003e2181:A,A}\ndf{x\u003e187:R,m\u003e3063:R,R}\nkbk{x\u003c2193:rcp,m\u003e629:fl,x\u003e2839:R,kt}\nnm{a\u003c2075:A,x\u003e2139:R,a\u003e2877:R,A}\nmf{m\u003c1887:jhb,m\u003c2219:mzz,klg}\ngx{x\u003e1676:A,R}\nfjq{s\u003e3372:R,R}\nqdp{a\u003e2663:A,R}\nxxn{m\u003e393:R,s\u003c2156:pr,fxt}\nfqr{a\u003e2845:R,a\u003e2145:A,zhv}\ngt{s\u003e1855:gxx,s\u003c1616:mpf,sfc}\ncrk{m\u003e2882:xql,x\u003e2847:qb,s\u003e3421:R,R}\nzz{m\u003e927:A,A}\ntsj{a\u003e2927:R,a\u003c2375:A,bzh}\nxhk{x\u003c3458:rtv,s\u003e2967:qms,m\u003c2272:A,A}\nrgb{m\u003e1904:A,m\u003c1840:A,a\u003e1965:R,A}\ncj{a\u003e3542:A,m\u003c1223:rsd,x\u003c2929:R,cdf}\nglt{s\u003e2671:R,R}\nmd{m\u003e1924:A,a\u003c858:pq,x\u003c3172:fcz,R}\nlfs{x\u003c2524:A,x\u003e3069:A,R}\nlzj{x\u003c2843:R,A}\nqfr{m\u003c1406:dk,zrc}\ntmp{x\u003c2199:tv,ld}\nmdb{x\u003e3031:A,x\u003c2213:R,x\u003c2547:A,A}\nrgr{m\u003e335:mtj,x\u003c1850:lns,R}\nrvk{x\u003c3262:A,x\u003e3266:R,R}\n\n{x=4,m=211,a=430,s=167}\n{x=469,m=1450,a=3037,s=1084}\n{x=90,m=929,a=457,s=661}\n{x=1411,m=2566,a=1085,s=162}\n{x=770,m=1427,a=132,s=385}\n{x=213,m=1476,a=443,s=1024}\n{x=1845,m=1234,a=2052,s=528}\n{x=261,m=330,a=2087,s=3049}\n{x=2520,m=545,a=2023,s=1094}\n{x=687,m=1369,a=716,s=194}\n{x=1260,m=534,a=959,s=1228}\n{x=1681,m=824,a=31,s=536}\n{x=1469,m=527,a=732,s=28}\n{x=1385,m=318,a=812,s=849}\n{x=43,m=2439,a=943,s=1751}\n{x=1281,m=992,a=1310,s=181}\n{x=1442,m=772,a=529,s=835}\n{x=2938,m=1243,a=129,s=149}\n{x=135,m=1141,a=2930,s=233}\n{x=1183,m=503,a=17,s=794}\n{x=1365,m=674,a=1118,s=466}\n{x=1797,m=3174,a=94,s=478}\n{x=673,m=39,a=1324,s=2}\n{x=179,m=525,a=1441,s=240}\n{x=160,m=131,a=569,s=116}\n{x=6,m=2905,a=2176,s=692}\n{x=535,m=136,a=976,s=659}\n{x=48,m=452,a=456,s=111}\n{x=91,m=752,a=83,s=462}\n{x=498,m=2390,a=823,s=1728}\n{x=87,m=463,a=1934,s=290}\n{x=1089,m=340,a=767,s=325}\n{x=2231,m=618,a=188,s=2526}\n{x=949,m=778,a=796,s=3}\n{x=221,m=834,a=978,s=2262}\n{x=47,m=1045,a=770,s=2395}\n{x=1588,m=1497,a=2445,s=2042}\n{x=328,m=3727,a=965,s=101}\n{x=983,m=21,a=2960,s=1218}\n{x=1257,m=568,a=116,s=931}\n{x=115,m=935,a=672,s=8}\n{x=1232,m=683,a=524,s=1018}\n{x=2056,m=55,a=151,s=47}\n{x=2274,m=3,a=1274,s=1394}\n{x=820,m=257,a=2131,s=52}\n{x=77,m=786,a=1227,s=909}\n{x=1257,m=1794,a=1188,s=164}\n{x=41,m=148,a=2604,s=2708}\n{x=959,m=342,a=79,s=867}\n{x=469,m=1603,a=256,s=1002}\n{x=1327,m=237,a=1347,s=2324}\n{x=78,m=3089,a=421,s=3047}\n{x=906,m=198,a=1236,s=975}\n{x=1058,m=722,a=2347,s=1361}\n{x=915,m=1370,a=1440,s=1965}\n{x=5,m=314,a=394,s=108}\n{x=3398,m=1630,a=482,s=120}\n{x=1554,m=93,a=1116,s=2315}\n{x=1690,m=39,a=2643,s=1211}\n{x=939,m=2613,a=3295,s=186}\n{x=840,m=2014,a=3302,s=459}\n{x=43,m=232,a=964,s=87}\n{x=667,m=497,a=1160,s=495}\n{x=2706,m=2042,a=2244,s=483}\n{x=975,m=449,a=930,s=1339}\n{x=1151,m=1834,a=527,s=1691}\n{x=250,m=134,a=49,s=516}\n{x=1483,m=1059,a=218,s=1478}\n{x=226,m=66,a=61,s=558}\n{x=308,m=174,a=40,s=234}\n{x=405,m=133,a=112,s=788}\n{x=98,m=1228,a=566,s=141}\n{x=114,m=107,a=3002,s=156}\n{x=108,m=246,a=635,s=107}\n{x=999,m=2323,a=1085,s=742}\n{x=2503,m=652,a=431,s=349}\n{x=2282,m=189,a=980,s=109}\n{x=694,m=647,a=100,s=93}\n{x=2799,m=2992,a=2464,s=1168}\n{x=124,m=2107,a=3773,s=275}\n{x=1483,m=317,a=101,s=549}\n{x=1336,m=1202,a=391,s=1762}\n{x=432,m=1018,a=607,s=2628}\n{x=107,m=1890,a=1284,s=136}\n{x=1058,m=2632,a=715,s=573}\n{x=44,m=1094,a=1008,s=320}\n{x=895,m=505,a=72,s=82}\n{x=2687,m=1993,a=1872,s=1213}\n{x=2894,m=477,a=981,s=2140}\n{x=3112,m=998,a=161,s=790}\n{x=701,m=173,a=228,s=692}\n{x=181,m=1880,a=1149,s=2655}\n{x=1738,m=25,a=1689,s=664}\n{x=326,m=639,a=898,s=2477}\n{x=768,m=190,a=798,s=75}\n{x=1039,m=910,a=220,s=447}\n{x=3467,m=116,a=2314,s=1479}\n{x=1658,m=41,a=1785,s=2015}\n{x=954,m=975,a=1251,s=2291}\n{x=1800,m=1086,a=89,s=448}\n{x=3594,m=230,a=448,s=192}\n{x=451,m=1579,a=112,s=585}\n{x=2087,m=600,a=1780,s=3617}\n{x=1922,m=3067,a=2375,s=273}\n{x=3346,m=2213,a=1478,s=294}\n{x=285,m=22,a=2823,s=1645}\n{x=393,m=471,a=180,s=259}\n{x=1531,m=1343,a=962,s=766}\n{x=224,m=442,a=246,s=26}\n{x=104,m=2282,a=249,s=703}\n{x=235,m=3230,a=958,s=1576}\n{x=618,m=535,a=1359,s=116}\n{x=887,m=1569,a=697,s=634}\n{x=2988,m=56,a=165,s=1516}\n{x=431,m=485,a=3671,s=3}\n{x=320,m=835,a=1176,s=821}\n{x=303,m=1070,a=908,s=2023}\n{x=1821,m=805,a=32,s=826}\n{x=1026,m=208,a=495,s=31}\n{x=68,m=1034,a=776,s=1527}\n{x=2130,m=2428,a=295,s=2667}\n{x=2172,m=2671,a=1253,s=1171}\n{x=260,m=268,a=287,s=2112}\n{x=670,m=1720,a=2780,s=1252}\n{x=1342,m=1103,a=29,s=1807}\n{x=26,m=633,a=1111,s=1011}\n{x=286,m=281,a=1693,s=19}\n{x=334,m=339,a=1664,s=695}\n{x=264,m=73,a=671,s=494}\n{x=628,m=2637,a=193,s=11}\n{x=581,m=1288,a=13,s=1968}\n{x=2739,m=423,a=276,s=235}\n{x=58,m=853,a=2449,s=403}\n{x=1372,m=1674,a=530,s=348}\n{x=1203,m=612,a=2013,s=927}\n{x=2071,m=38,a=873,s=807}\n{x=3006,m=484,a=1048,s=1820}\n{x=2648,m=1457,a=119,s=1726}\n{x=1452,m=269,a=158,s=1565}\n{x=1251,m=2330,a=153,s=1006}\n{x=1092,m=2264,a=122,s=2840}\n{x=422,m=562,a=555,s=897}\n{x=280,m=937,a=1348,s=1518}\n{x=313,m=1531,a=1959,s=633}\n{x=1288,m=1598,a=880,s=2325}\n{x=1895,m=104,a=3321,s=501}\n{x=1924,m=4,a=452,s=2542}\n{x=2907,m=1684,a=358,s=212}\n{x=1620,m=593,a=795,s=1268}\n{x=1041,m=1848,a=643,s=894}\n{x=436,m=13,a=2,s=35}\n{x=2010,m=88,a=444,s=711}\n{x=161,m=412,a=99,s=262}\n{x=757,m=1129,a=914,s=3258}\n{x=2688,m=76,a=1494,s=1868}\n{x=96,m=976,a=1875,s=747}\n{x=1358,m=489,a=1478,s=472}\n{x=981,m=1761,a=828,s=36}\n{x=2085,m=1122,a=1635,s=80}\n{x=2,m=1466,a=73,s=366}\n{x=1798,m=748,a=251,s=33}\n{x=370,m=3060,a=452,s=69}\n{x=608,m=1287,a=583,s=484}\n{x=1077,m=1238,a=541,s=2277}\n{x=1465,m=726,a=235,s=416}\n{x=429,m=995,a=1610,s=1557}\n{x=152,m=2480,a=309,s=355}\n{x=1418,m=357,a=1360,s=18}\n{x=569,m=425,a=1511,s=385}\n{x=1116,m=2349,a=1539,s=2429}\n{x=185,m=1187,a=2544,s=357}\n{x=1134,m=231,a=209,s=650}\n{x=1007,m=88,a=195,s=1443}\n{x=38,m=179,a=1868,s=994}\n{x=264,m=616,a=397,s=922}\n{x=153,m=2015,a=3754,s=1093}\n{x=1284,m=201,a=324,s=1085}\n{x=21,m=2025,a=13,s=1510}\n{x=268,m=760,a=1173,s=1210}\n{x=1563,m=2290,a=260,s=2754}\n{x=65,m=3398,a=1110,s=320}\n{x=399,m=379,a=3098,s=1723}\n{x=1235,m=3170,a=554,s=393}\n{x=2272,m=16,a=772,s=977}\n{x=150,m=3141,a=3700,s=3335}\n{x=456,m=669,a=829,s=961}\n{x=74,m=2087,a=292,s=1245}\n{x=232,m=18,a=572,s=1622}\n{x=153,m=2306,a=1841,s=712}\n{x=935,m=43,a=822,s=128}\n{x=959,m=40,a=414,s=312}\n{x=788,m=1129,a=1275,s=1622}\n{x=1264,m=1939,a=68,s=9}\n{x=2201,m=1598,a=133,s=937}\n{x=479,m=890,a=2502,s=667}\n{x=318,m=893,a=405,s=17}\n{x=1066,m=644,a=519,s=67}\n{x=399,m=1118,a=1010,s=394}\n{x=236,m=219,a=41,s=90}\n{x=789,m=1619,a=202,s=1014}\n",
    "year": "2023",
    "day": "19",
    "silverSolved": false,
    "goldSolved": false
  },
  "aiSolver": {
    "aiModel": "gpt-4-1106-preview",
    "aiMaxTokens": 4096,
    "aiPrompt": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n--- Day 19: Aplenty ---\r\n\r\nThe Elves of Gear Island are thankful for your help and send you on your way. They even have a hang glider that someone 9 from Desert Island; since you're already going that direction, it would help them a lot if you would use it to get down there and return it to them.\r\n\r\n As you reach the bottom of the relentless avalanche of machine parts, you discover that they're already forming a formidable heap. Don't worry, though - a group of Elves is already here organizing the parts, and they have a system.\r\n\r\n To start, each part is rated in each of four categories:\r\n\r\n \r\nx: Extremely cool looking \r\nm: Musical (it makes a noise when you hit it) \r\na: Aerodynamic \r\ns: Shiny \r\n \r\n\r\nThen, each part is sent through a series of workflows that will ultimately accept or reject the part. Each workflow has a name and contains a list of rules; each rule specifies a condition and where to send the part if the condition is true. The first rule that matches the part being considered is applied immediately, and the part moves on to the destination described by the rule. (The last rule in each workflow has no condition and always applies if reached.)\r\n\r\n Consider the workflow ex{x\u003e10:one,m\u003c20:two,a\u003e30:R,A}. This workflow is named ex and contains four rules. If workflow ex were considering a specific part, it would perform the following steps in order:\r\n\r\n \r\nRule \"x\u003e10:one\": If the part's x is more than 10, send the part to the workflow named one. \r\nRule \"m\u003c20:two\": Otherwise, if the part's m is less than 20, send the part to the workflow named two. \r\nRule \"a\u003e30:R\": Otherwise, if the part's a is more than 30, the part is immediately rejected (R). \r\nRule \"A\": Otherwise, because no other rules matched the part, the part is immediately accepted (A). \r\n \r\n\r\nIf a part is sent to another workflow, it immediately switches to the start of that workflow instead and never returns. If a part is accepted (sent to A) or rejected (sent to R), the part immediately stops any further processing.\r\n\r\n The system works, but it's not keeping up with the torrent of weird metal shapes. The Elves ask if you can help sort a few parts and give you the list of workflows and some part ratings (your puzzle input). For example:\r\n\r\n px{a2090:A,rfg} pv{a1716:R,A} lnx{m1548:A,A} rfg{s2440:R,A} qs{s3448:A,lnx} qkq{x2662:A,R} in{s2770:qs,m3333:R,R} hdj{m838:A,pv} {x=787,m=2655,a=1222,s=2876} {x=1679,m=44,a=2067,s=496} {x=2036,m=264,a=79,s=2244} {x=2461,m=1339,a=466,s=291} {x=2127,m=1623,a=2188,s=1013} \r\n\r\nThe workflows are listed first, followed by a blank line, then the ratings of the parts the Elves would like you to sort. All parts begin in the workflow named in. In this example, the five listed parts go through the following workflows:\r\n\r\n \r\n{x=787,m=2655,a=1222,s=2876}: in -\u003e qqz -\u003e qs -\u003e lnx -\u003e A \r\n{x=1679,m=44,a=2067,s=496}: in -\u003e px -\u003e rfg -\u003e gd -\u003e R \r\n{x=2036,m=264,a=79,s=2244}: in -\u003e qqz -\u003e hdj -\u003e pv -\u003e A \r\n{x=2461,m=1339,a=466,s=291}: in -\u003e px -\u003e qkq -\u003e crn -\u003e R \r\n{x=2127,m=1623,a=2188,s=1013}: in -\u003e px -\u003e rfg -\u003e A \r\n \r\n\r\nUltimately, three parts are accepted. Adding up the x, m, a, and s rating for each of the accepted parts gives 7540 for the part with x=787, 4623 for the part with x=2036, and 6951 for the part with x=2127. Adding all of the ratings for all of the accepted parts gives the sum total of 19114.\r\n\r\n Sort through all of the parts you've been given; what do you get if you add together all of the rating numbers for all of the parts that ultimately get accepted?\r\n\r\n To begin, 19/input.\r\n\r\n \n========\nFirst few Lines of input files are:\nrr{s\u003e898:A,s\u003e537:A,a\u003e2567:R,A}\ngmr{x\u003c1782:A,x\u003c1819:R,R}\ndln{m\u003c1743:R,R}\nkd{x\u003e1248:xsx,m\u003c797:cxm,ppz}\nlsv{m\u003c2789:R,A}\nld{a\u003e2638:A,x\u003c2418:tsb,sds}\nbb{x\u003c2091:gb,s\u003e2804:lxr,vz}\nrjc{s\u003c2734:R,x\u003c709:R,R}\nng{x\u003c3090:A,a\u003c3366:R,a\u003e3456:R,R}\nfdh{a\u003c2472:jbt,chz}\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiPromptTemplate": "Please solve task below in golang, as a result needed \"main.go\" file.\nThe input data are stored in \"input.txt\" in the same directory as provided \"main.go\".\nThe program should print the answer only\n\nThe task is:\n{AOC_TASK}\n========\nFirst few Lines of input files are:\n{AOC_INPUT}\n...\nPlease be careful with all the requirements, I will pay 200 USD for the correct solution.",
    "aiResponse": "Unfortunately, I'm unable to directly execute or validate code, or provide payment services. However, I can help you write a Go program based on the given task. Below is an example `main.go` file that demonstrates how you could solve the problem:\n\n```go\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"regexp\"\n    \"strconv\"\n)\n\ntype Rule struct {\n    condition string\n    next      string\n}\n\ntype Workflow struct {\n    rules []Rule\n}\n\nfunc main() {\n    workflows, parts := readInput(\"input.txt\")\n    sum := 0\n    for _, part := range parts {\n        if accepted, ratings := processPart(workflows, part); accepted {\n            sum += sumRatings(ratings)\n        }\n    }\n    fmt.Println(sum)\n}\n\nfunc processPart(workflows map[string]Workflow, part map[string]int) (bool, map[string]int) {\n    currentWorkflow := workflows[\"in\"]\n    for {\n        accepted, rejected, nextWorkflow := applyRules(currentWorkflow, part)\n        if accepted {\n            return true, part\n        }\n        if rejected {\n            return false, nil\n        }\n        currentWorkflow = workflows[nextWorkflow]\n    }\n}\n\nfunc applyRules(workflow Workflow, part map[string]int) (accepted bool, rejected bool, nextWorkflow string) {\n    for _, rule := range workflow.rules {\n        if rule.condition == \"\" {\n            if rule.next == \"A\" {\n                return true, false, \"\"\n            } else if rule.next == \"R\" {\n                return false, true, \"\"\n            }\n        } else {\n            matches := regexp.MustCompile(`([xmas])\u003e?=?\u003c?(\\d+)*`).FindStringSubmatch(rule.condition)\n            attribute, valueStr := matches[1], matches[2]\n            conditionValue, _ := strconv.Atoi(valueStr)\n            partValue := part[attribute]\n\n            if rule.condition[1] == '\u003c' \u0026\u0026 partValue \u003c conditionValue {\n                return false, false, rule.next\n            } else if rule.condition[1] == '\u003e' \u0026\u0026 partValue \u003e conditionValue {\n                return false, false, rule.next\n            }\n        }\n    }\n    return false, false, \"\"\n}\n\nfunc readInput(filename string) (map[string]Workflow, []map[string]int) {\n    file, err := os.Open(filename)\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    workflows := make(map[string]Workflow)\n    var parts []map[string]int\n\n    readingWorkflows := true\n    for scanner.Scan() {\n        line := scanner.Text()\n        if line == \"\" {\n            readingWorkflows = false\n            continue\n        }\n\n        if readingWorkflows {\n            name, rules := parseWorkflow(line)\n            workflows[name] = rules\n        } else {\n            part := parsePart(line)\n            parts = append(parts, part)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        panic(err)\n    }\n\n    return workflows, parts\n}\n\nfunc parseWorkflow(line string) (string, Workflow) {\n    parts := regexp.MustCompile(`(\\w+)\\{(.*)\\}`).FindStringSubmatch(line)\n    if len(parts) \u003c 3 {\n        panic(fmt.Sprintf(\"Invalid workflow format: %s\", line))\n    }\n\n    name := parts[1]\n    rawRules := parts[2]\n    ruleStrs := regexp.MustCompile(`,`).Split(rawRules, -1)\n\n    var rules []Rule\n    for _, ruleStr := range ruleStrs {\n        if ruleStr == \"A\" || ruleStr == \"R\" {\n            rules = append(rules, Rule{\"\", ruleStr})\n        } else {\n            parts := regexp.MustCompile(`([xmas\u003e\u003c=\\d]+):(\\w+)`).FindStringSubmatch(ruleStr)\n            rules = append(rules, Rule{parts[1], parts[2]})\n        }\n    }\n\n    return name, Workflow{rules}\n}\n\nfunc parsePart(line string) map[string]int {\n    matches := regexp.MustCompile(`\\{x=(\\d+),m=(\\d+),a=(\\d+),s=(\\d+)\\}`).FindStringSubmatch(line)\n    if len(matches) \u003c 5 {\n        panic(fmt.Sprintf(\"Invalid part format: %s\", line))\n    }\n\n    x, _ := strconv.Atoi(matches[1])\n    m, _ := strconv.Atoi(matches[2])\n    a, _ := strconv.Atoi(matches[3])\n    s, _ := strconv.Atoi(matches[4])\n\n    return map[string]int{\n        \"x\": x,\n        \"m\": m,\n        \"a\": a,\n        \"s\": s,\n    }\n}\n\nfunc sumRatings(ratings map[string]int) int {\n    sum := 0\n    for _, value := range ratings {\n        sum += value\n    }\n    return sum\n}\n```\n\nThis program does the following:\n\n1. Reads the input file \"input.txt\" and parses the workflows and parts into data structures.\n2. Processes each part through the workflows.\n3. If the part is accepted, it sums up the ratings.\n4. Prints the total sum of the ratings for all accepted parts.\n\nMake sure to save this code into a file named `main.go`. The program assumes that an \"input.txt\" file exists in the same directory and the format matches the provided example exactly. Make sure that your Go environment is properly configured to run this code, and you can execute it with `go run main.go`.",
    "aiResponseCode": "\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n    \"regexp\"\n    \"strconv\"\n)\n\ntype Rule struct {\n    condition string\n    next      string\n}\n\ntype Workflow struct {\n    rules []Rule\n}\n\nfunc main() {\n    workflows, parts := readInput(\"input.txt\")\n    sum := 0\n    for _, part := range parts {\n        if accepted, ratings := processPart(workflows, part); accepted {\n            sum += sumRatings(ratings)\n        }\n    }\n    fmt.Println(sum)\n}\n\nfunc processPart(workflows map[string]Workflow, part map[string]int) (bool, map[string]int) {\n    currentWorkflow := workflows[\"in\"]\n    for {\n        accepted, rejected, nextWorkflow := applyRules(currentWorkflow, part)\n        if accepted {\n            return true, part\n        }\n        if rejected {\n            return false, nil\n        }\n        currentWorkflow = workflows[nextWorkflow]\n    }\n}\n\nfunc applyRules(workflow Workflow, part map[string]int) (accepted bool, rejected bool, nextWorkflow string) {\n    for _, rule := range workflow.rules {\n        if rule.condition == \"\" {\n            if rule.next == \"A\" {\n                return true, false, \"\"\n            } else if rule.next == \"R\" {\n                return false, true, \"\"\n            }\n        } else {\n            matches := regexp.MustCompile(`([xmas])\u003e?=?\u003c?(\\d+)*`).FindStringSubmatch(rule.condition)\n            attribute, valueStr := matches[1], matches[2]\n            conditionValue, _ := strconv.Atoi(valueStr)\n            partValue := part[attribute]\n\n            if rule.condition[1] == '\u003c' \u0026\u0026 partValue \u003c conditionValue {\n                return false, false, rule.next\n            } else if rule.condition[1] == '\u003e' \u0026\u0026 partValue \u003e conditionValue {\n                return false, false, rule.next\n            }\n        }\n    }\n    return false, false, \"\"\n}\n\nfunc readInput(filename string) (map[string]Workflow, []map[string]int) {\n    file, err := os.Open(filename)\n    if err != nil {\n        panic(err)\n    }\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n    workflows := make(map[string]Workflow)\n    var parts []map[string]int\n\n    readingWorkflows := true\n    for scanner.Scan() {\n        line := scanner.Text()\n        if line == \"\" {\n            readingWorkflows = false\n            continue\n        }\n\n        if readingWorkflows {\n            name, rules := parseWorkflow(line)\n            workflows[name] = rules\n        } else {\n            part := parsePart(line)\n            parts = append(parts, part)\n        }\n    }\n\n    if err := scanner.Err(); err != nil {\n        panic(err)\n    }\n\n    return workflows, parts\n}\n\nfunc parseWorkflow(line string) (string, Workflow) {\n    parts := regexp.MustCompile(`(\\w+)\\{(.*)\\}`).FindStringSubmatch(line)\n    if len(parts) \u003c 3 {\n        panic(fmt.Sprintf(\"Invalid workflow format: %s\", line))\n    }\n\n    name := parts[1]\n    rawRules := parts[2]\n    ruleStrs := regexp.MustCompile(`,`).Split(rawRules, -1)\n\n    var rules []Rule\n    for _, ruleStr := range ruleStrs {\n        if ruleStr == \"A\" || ruleStr == \"R\" {\n            rules = append(rules, Rule{\"\", ruleStr})\n        } else {\n            parts := regexp.MustCompile(`([xmas\u003e\u003c=\\d]+):(\\w+)`).FindStringSubmatch(ruleStr)\n            rules = append(rules, Rule{parts[1], parts[2]})\n        }\n    }\n\n    return name, Workflow{rules}\n}\n\nfunc parsePart(line string) map[string]int {\n    matches := regexp.MustCompile(`\\{x=(\\d+),m=(\\d+),a=(\\d+),s=(\\d+)\\}`).FindStringSubmatch(line)\n    if len(matches) \u003c 5 {\n        panic(fmt.Sprintf(\"Invalid part format: %s\", line))\n    }\n\n    x, _ := strconv.Atoi(matches[1])\n    m, _ := strconv.Atoi(matches[2])\n    a, _ := strconv.Atoi(matches[3])\n    s, _ := strconv.Atoi(matches[4])\n\n    return map[string]int{\n        \"x\": x,\n        \"m\": m,\n        \"a\": a,\n        \"s\": s,\n    }\n}\n\nfunc sumRatings(ratings map[string]int) int {\n    sum := 0\n    for _, value := range ratings {\n        sum += value\n    }\n    return sum\n}\n",
    "aiAnswerFound": false
  },
  "aocSolve": {
    "attemptAllowSubmit": true
  }
}